<p>
    Self-hosting allows you to customize Appwrite to meet your needs and preferences. Here's a list of things you will need to setup before developing with Appwrite. Before you start, backup your <code>.env</code> and <code>docker-compose.yml</code> files.
</p>

<h2><a href="#localhost" id="localhost">Localhost Development</a></h2>
<p>Self-hosting Appwrite for development lets you quickly prototype on your local machine. Since localhost is only a loopback address that points back at your development machine, there are some caveats you should be aware of when working with localhost.</p>
<p>Appwrite generates a self-signed certificate for iOS and Android development on localhost, as they don't allow unsecure HTTP by default. If you're developing Android or iOS apps on localhost, set <code>setSelfSigned(true)</code> while initializing your Appwrite client.</p>
<p>If you're using an Android emulator to test your Flutter or Android apps, you can access localhost of your machine using the special alias IP <code>10.0.2.2</code>.</p>
<p>If you're testing your Flutter, Android, or iOS app on a mobile device, you will not be able to access the localhost of your PC or Mac. When testing with a physical device, you may use a service like <a href="https://ngrok.com/" target="_blank" rel="noopener">ngrok</a> to proxy the Appwrite instance.</p>

<h2><a href="#delivery" id="delivery">Setup Email and SMS Delivery</a></h2>
<p>
    Appwrite requires an SMTP service to deliver emails. Email delivery is required for features like password recovery, account verification, MagicURL authentication, and team invites. You can choose to a third-party SMTP service or hosting your own SMTP server.
</p>
<p><a href="/docs/email-delivery">Set up email delivery</a></p>

<p>
    Appwrite requires a third-party SMS delivery service to send SMS messages. SMS delivery is required for phone authentication.
</p>
<p><a href="/docs/email-delivery">Set up SMS delivery</a></p>

<h2><a href="#functions" id="functions">Configure Function Runtimes</a></h2>
<p>
    Not all function runtimes are enabled by default. Enable the runtimes that you need and disabled unused runtimes to save disk space on your server.
    To enable a runtime, add it to the <code>_APP_FUNCTIONS_RUNTIMES</code> environment variable as a comma separated list. 
</p>

<p>
    The example below would enable Dart 2.15, .Net 6.0, and Java 18 runtimes.
</p>

<div class="ide margin-bottom" data-lang="bash" data-lang-label="Bash">
    <pre class="line-numbers"><code class="prism language-bash" data-prism>_APP_FUNCTIONS_RUNTIMES=dart-2.15, dotnet-6.0, java-18.0</code></pre>
</div>

You can find a full list of supported runtimes in the <a href="/docs/environment-variables#functions">environment variables</a> page.

<p>You can also configure the maximum timeout that can be set on individual Appwrite functions. The maximum configurable timeout can be increased by changing the <code>_APP_FUNCTIONS_TIMEOUT</code> environment variable. This environment variable changes the configurable maximum but does not alter existing individual configurations.</p>

<h2><a href="#storage" id="storage">Storage Adaptors</a></h2>
<p>Appwrite's Storage Service can be configured to store files locally, or self-hosted and cloud storage services. By default, Appwrite's Storage Service <b>stores files on your server's local storage</b>. If you expect large volumes of data or the need to have scalable data storage, you may choose to use a separate storage service.</p>

<p>Appwrite supports AWS S3, Digital Ocean Spaces, Backblazk, Linode, and Wasabi as storage adaptors. Some of these services can be self-hosted, just like Appwrite.</p>

<p>You can select which storage adaptor to use by setting the <code>_APP_STORAGE_DEVICE</code> environment variable. Valid values are 'local', 's3', 'dospaces', 'backblaze', 'linode' and 'wasabi'. Each storage adaptor requires their own set of environment variables to configure.</p>

<p>The maximum file size allowed for file upload is controlled by the <code>_APP_STORAGE_LIMIT</code> environment variable, which defaults to 30 MB. See [Environment Variables](/docs/environment-variables#storage) for more information.</p>

<a href="/docs/environment-variables#storage">Configure storage adaptors</a>

<h2><a href="#apply-changes" id="apply-changes">Applying Changes</a></h2>
<p>After editing your <code>docker-compose.yml</code> or <code>.env</code> files, you will need to recreate your Appwrite stack by running the following compose command in your terminal.</p>

<div class="ide margin-bottom" data-lang="bash" data-lang-label="Bash">
    <pre class="line-numbers"><code class="prism language-bash" data-prism>docker compose up -d</code></pre>
</div>

<p>You can verify if the changes have been successfully applied by running this command:</p>
<div class="ide margin-bottom" data-lang="bash" data-lang-label="Bash">
    <pre class="line-numbers"><code class="prism language-bash" data-prism>docker compose exec appwrite vars</code></pre>
</div>

<h2><a href="#more-configs" id="more-configs">More Configurable Options</a></h2>
<p>If you don't see something you'd like to configure on this page, try searching the full list of environment variables.</p>
<a href="/docs/environment-variables">Learn more about environment variables</a>

