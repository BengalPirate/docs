<p>The <a href="https://github.com/appwrite/sdk-for-cli" target="_blank" rel="noopener">Appwrite CLI</a> is a command-line application that allows you to interact with the <a href="/docs/getting-started-for-server">Appwrite server</a> and perform server-side tasks using your terminal. This includes creating and managing projects, managing resources (documents, files, users), creating and deploying Cloud Functions, and other operations available through Appwrite's API.</p>

<h2><a href="/docs/command-line#installation" id="installation">Installation</a></h2>

<p>The CLI is packaged both as an <a href="https://www.npmjs.com/package/appwrite-cli">npm module</a> as well as a <a href="https://github.com/appwrite/sdk-for-cli/releases/latest">standalone binary</a> for your operating system, making it completely dependency free, platform independent and language agnostic.</p>

<p>If you plan to use the CLI to initialize new Cloud Functions, ensure that <a href="https://git-scm.com/book/en/v2/Getting-Started-Installing-Git" target="_blank" rel="noopener">Git is installed</a> on your machine.</p>

<h3><a href="/docs/command-line#installWithNpm" id="installWithNpm">Install with NPM</a></h3>

<p>If you have npm set up, run the command below to install the CLI</p>

<div class="ide margin-bottom" data-lang="bash" data-lang-label="Bash">
    <pre class="line-numbers"><code class="prism language-bash" data-prism>npm install -g appwrite-cli</code></pre>
</div>


<h3><a href="/docs/command-line#installWithScript" id="installWithScript">Install with Script</a></h3>

<p>For a completely dependency-free installation, the CLI also ships with a convenient installation script for your operating system</p>

<ul class="phases clear" data-ui-phases>
    <li>
        <h4>MacOS</h4>
        <p>Using <a href="https://brew.sh" target="_blank">Homebrew</a></p>
        <div class="ide margin-bottom" data-lang="bash" data-lang-label="Bash">
            <pre class="line-numbers"><code class="prism language-bash" data-prism>brew tap appwrite/sdk-for-cli https://github.com/appwrite/sdk-for-cli
brew update
brew install --HEAD appwrite</code></pre>
        </div>

        <p>or terminal</p>
        <div class="ide margin-bottom" data-lang="bash" data-lang-label="Bash">
            <pre class="line-numbers"><code class="prism language-bash" data-prism>curl -sL <?php echo $this->getParam('home'); ?>/cli/install.sh | bash</code></pre>
        </div>
    </li>
    
    <li>
        <h4>Windows</h4>
        <div class="ide margin-bottom" data-lang="powershell" data-lang-label="PowerShell">
            <pre class="line-numbers"><code class="prism language-powershell" data-prism>iwr -useb <?php echo $this->getParam('home'); ?>/cli/install.ps1 | iex</code></pre>
        </div>
    </li>
    
    <li>
        <h4>Linux</h4>
        <div class="ide margin-bottom" data-lang="bash" data-lang-label="Bash">
            <pre class="line-numbers"><code class="prism language-bash" data-prism>curl -sL <?php echo $this->getParam('home'); ?>/cli/install.sh | bash</code></pre>
        </div>
    </li>
</ul>

<p>After the installation is complete, verify the install using</p>

<div class="ide margin-bottom" data-lang="bash" data-lang-label="CLI">
    <pre class="line-numbers"><code class="prism language-bash" data-prism>appwrite -v</code></pre>
</div>

<p>The next step is to have your Appwrite server running. You can grab our simple <a href="/docs/installation">installation command</a> and execute it. Now, we're all set to play around with the CLI.</p>

<h2><a href="/docs/command-line#gettingStarted" id="gettingStarted">Getting Started</a></h2>

<p>Before you can use the CLI, you need to login to your Appwrite account using</p>

<div class="ide margin-bottom" data-lang="bash" data-lang-label="CLI">
    <pre class="line-numbers"><code class="prism language-bash" data-prism>appwrite login</code></pre>
</div>

<div class="notice margin-bottom"> 
    <h3>Self-Signed Certificates</h3> 
    <p>By default, requests to domains with self-signed SSL certificates (or no certificates) are disabled. If you trust the domain, you can bypass the certificate validation using</p>
    <div class="ide margin-bottom" data-lang="bash" data-lang-label="CLI">
        <pre class="line-numbers"><code class="prism language-bash" data-prism>appwrite client --selfSigned true</code></pre>
    </div>
</div>

<h3><a href="/docs/command-line#initializeProject" id="initializeProject">Initializing Your Project</a></h3>

<p>After you're logged in, the CLI needs to be initialized with your Appwrite project. You can initialize the CLI using:</p>

<div class="ide margin-bottom" data-lang="bash" data-lang-label="CLI">
    <pre class="line-numbers"><code class="prism language-bash" data-prism>appwrite init project</code></pre>
</div>

<p>The following prompts will guide you through the setup process. The init command also creates an <a href="/docs/command-line#appwriteJSON">appwrite.json</a> file representing your Appwrite project.

<p>You can also fetch all the collections in your current project using</p>

<div class="ide margin-bottom" data-lang="bash" data-lang-label="CLI">
    <pre class="line-numbers"><code class="prism language-bash" data-prism>appwrite init collection</code></pre>
</div>

<h3><a href="/docs/command-line#deployFunctions" id="deployFunctions">Deploying Cloud Functions</a></h3>

<p>The CLI also handles the creation and deployment of Appwrite's Cloud Functions. You can initialize a new function using</p>

<div class="ide margin-bottom" data-lang="bash" data-lang-label="CLI">
    <pre class="line-numbers"><code class="prism language-bash" data-prism>appwrite init function
? What would you like to name your function? My Awesome Function
? What runtime would you like to use? Node.js (node-15.5)
✓ Success</code></pre>
</div>

<p>This command creates a new function <b>My Awesome Function</b> in your current Appwrite project and also creates a template function for you to get started. You can now deploy this function using: </p>

<div class="ide margin-bottom" data-lang="bash" data-lang-label="CLI">
    <pre class="line-numbers"><code class="prism language-bash" data-prism>appwrite deploy function
? Which functions would you like to deploy? Awesome Function (621229798628cf5bf712)
ℹ Info Deploying function Awesome Function ( 621229798628cf5bf712 )
✓ Success Deployed Awesome Function ( 621229798628cf5bf712 )</code></pre>
</div>

<h3><a href="/docs/command-line#deployCollections" id="deployCollections">Deploying collections</a></h3>

<p>The Appwrite CLI also helps you migrate your project's collections from a development server to a production server. You can deploy all the collections in your <a href="/docs/command-line#appwriteJSON">appwrite.json</a> file using:</p>

<div class="ide margin-bottom" data-lang="bash" data-lang-label="CLI">
    <pre class="line-numbers"><code class="prism language-bash" data-prism>appwrite deploy collections</code></pre>
</div>

<h2><a href="/docs/command-line#appwriteJSON" id="appwriteJSON">The appwrite.json File</a></h2>

<p>An <code>appwrite.json</code> file is created by the CLI when you initialize your project. It stores all the configuration for the CLI to be able to interact with your Appwrite project in JSON format. When using the <code>appwrite deploy</code> command, the CLI uses information from <code>appwrite.json</code> to deploy your functions and collections.</p>

<p>The <code>appwrite.json</code> file does the following things:</p>

<ol class="margin-top margin-bottom-large">
  <li class="margin-bottom-small">Provides context to the CLI</li>
  <li class="margin-bottom-small">Keeps track of all your Cloud Functions</li>
  <li class="margin-bottom-small">Keeps track of all your project's collections</li>
  <li class="margin-bottom-small">Helps you deploy your Appwrite project to production and more</li>
</ol>

<h3><a href="/docs/command-line#configurable-options" id="configurable-options">Configurable Options</a></h3>
<table cellspacing="0" cellpadding="0" border="0" class="full margin-bottom-large">
    <thead>
        <tr>
            <th style="width: 150px">Option</th>
            <th>Type</th>
            <th>Description</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td><code>projectId</code></td>
            <td>string</td>
            <td>ID of your Appwrite Project.</td>
        </tr>
        <tr>
            <td><code>projectName</code></td>
            <td>string</td>
            <td>Name of your Appwrite Project.</td>
        </tr>
        <tr>
            <td><code>functions</code></td>
            <td>array of <a href="/docs/command-line#function-options">functions</a></td>
            <td>Configuration of functions in your project.</td>
        </tr>
        <tr>
            <td><code>collections</code></td>
            <td>Array of <a href="/docs/command-line#collection-options">collections</a></td>
            <td>Configuration of collections in your project.</td>
        </tr>
    </tbody>
</table>

<h3><a href="/docs/command-line#function-options" id="function-options">Function Options</a></h3>
<table cellspacing="0" cellpadding="0" border="0" class="full margin-bottom-large">
    <thead>
        <tr>
            <th style="width: 150px">Option</th>
            <th>Type</th>
            <th>Description</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td><code>$id</td>
            <td>string</td>
            <td>Function ID.</td>
        </tr>
        <tr>
            <td><code>name</td>
            <td>string</td>
            <td>Function Name.</td>
        </tr>
        <tr>
            <td><code>runtime</td>
            <td>string</td>
            <td>Function runtime, must be enabled. <a href="docs/functions#supportedRuntimes">Learn more about runtimes</a>.</td>
        </tr>
        <tr>
            <td><code>path</code></td>
            <td>string</td>
            <td>Path to folder containing the function's source code.</td>
        </tr>
        <tr>
            <td><code>entrypoint</code></td>
            <td>string</td>
            <td>Entry point of the function relative to the folder specified in path.</td>
        </tr>
        <tr>
            <td><code>ignore</code></td>
            <td>Array of strings</td>
            <td>Files to ignore inside the function. <a href="docs/functions#ignoreFiles">Learn more about ignoring files</a>.</td>
        </tr>
        <tr>
            <td><code>execute</code></td>
            <td>Array of strings</td>
            <td>Grants execute permissions to users. <a href="docs/rest#permissions">Learn more about role strings</a>.</td>
        </tr>
        <tr>
            <td><code>events</code></td>
            <td>Array of strings</td>
            <td>Events that trigger the function to execute. <a href="docs/events">Learn more about events</a>.</td>
        </tr>
        <tr>
            <td><code>schedule</code></td>
            <td>string</td>
            <td>Execution schedule for the function as a <a href="https://en.wikipedia.org/wiki/Cron" target="_blank" rel="noopener">cron expression</a>.</td>
        </tr>
        <tr>
            <td><code>timeout</code></td>
            <td>int</td>
            <td>Execution timeout of the function in seconds, with a maximum configurable limit of 900 seconds.</td>
        </tr>
        <tr>
            <td><code>variables</code></td>
            <td>JSON object</td>
            <td>Variables provided to the function on execution stored as a key-value JSON object.</td>
        </tr>
    </tbody>
</table>

<h3><a href="/docs/command-line#collection-options" id="collection-options">Collection Options</a></h3>
<table cellspacing="0" cellpadding="0" border="0" class="full margin-bottom-large">
    <thead>
        <tr>
            <th style="width: 150px">Option</th>
            <th>Type</th>
            <th>Description</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td><code>$id</code></td>
            <td>string</td>
            <td>Collection ID.</td>
        </tr>
        <tr>
            <td><code>name</code></td>
            <td>string</td>
            <td>Collection Name.</td>
        </tr>
        <tr>
            <td><code>databaseId</code></td>
            <td>string</td>
            <td>ID of the database to which this collection belongs.</td>
        </tr>
        <tr>
            <td><code>enabled</code></td>
            <td>bool</td>
            <td>If the collection is enabled.</td>
        </tr>
        <tr>
            <td><code>documentSecurity</code></td>
            <td>bool</td>
            <td>If access permissions can be defined at the document level.</td>
        </tr>
        <tr>
            <td><code>permissions</code></td>
            <td>Array of strings</td>
            <td>Grants access permissions to users at the collection level. <a href="docs/rest#permissions">Learn more about permissions</a>.</td>
        </tr>
        <tr>
            <td><code>attributes</code></td>
            <td>Array of objects</td>
            <td>Defines a list of attributes in the collection. <a href="docs/models/attributeList">Learn more about the Attributes List Object</a>.</td>
        </tr>
        <tr>
            <td><code>indexes</code></td>
            <td>Array of objects</td>
            <td>Defines a list of indexes in the collection. <a href="docs/models/indexList">Learn more about the Indexes List Object</a>.</td>
        </tr>
    </tbody>
</table>

<h2><a href="/docs/command-line#usageExamples" id="usageExamples">Usage Examples</a></h2>

<p>The Appwrite CLI follows the following general syntax.</p>

<div class="ide margin-bottom" data-lang="bash" data-lang-label="CLI">
    <pre class="line-numbers"><code class="prism language-bash" data-prism>appwrite [COMMAND] --[OPTIONS]</code></pre>
</div>

<p>A complete list of supported commands can be found below.</p>

<table cellspacing="0" cellpadding="0" border="0" class="full text-size-small">
    <thead>
    <tr>
        <th style="width: 200px">Command</th>
        <th>Description</th>
    </tr>
    </thead>
    <tbody>
    <tr>
        <td><code>login</code></td>
        <td>The login command allows you to authenticate a user into the CLI</td>
    </tr>
    <tr>
        <td><code>init</code></td>
        <td>The init command helps you initialize your Appwrite project, functions and collections</td>
    </tr>
    <tr>
        <td><code>deploy</code></td>
        <td>The deploy command provides a convenient wrapper for deploying your functions and collections</td>
    </tr>
    <tr>
        <td><code>logout</code></td>
        <td>The logout command allows you to logout from the CLI</td>
    </tr>
    <tr>
        <td><code>projects</code></td>
        <td>The projects command allows you to view, create and manage your Appwrite projects</td>
    </tr>
    <tr>
        <td><code>storage</code></td>
        <td>The storage command allows you to manage your project files</td>
    </tr>
    <tr>
        <td><code>teams</code></td>
        <td>The teams command allows you to group users of your project and to enable them to share read and write access to your project's resources</td>
    </tr>
    <tr>
        <td><code>users</code></td>
        <td>The users command allows you to manage your project users</td>
    </tr>
    <tr>
        <td><code>client</code></td>
        <td>The client command allows you to configure your CLI</td>
    </tr>
    <tr>
        <td><code>account</code></td>
        <td>The account command allows you to authenticate and manage a user account</td>
    </tr>
    <tr>
        <td><code>avatars</code></td>
        <td>The avatars command aims to help you complete everyday tasks related to your app image, icons, and avatars</td>
    </tr>
    <tr>
        <td><code>functions</code></td>
        <td>The functions command allows you view, create and manage your Cloud Functions</td>
    </tr>
    <tr>
        <td><code>databases</code></td>
        <td>The databases command allows you to create structured collections of documents, query and filter lists of documents</td>
    </tr>
    <tr>
        <td><code>health</code></td>
        <td>The health command allows you to both validate and monitor your Appwrite server's health</td>
    </tr>
    <tr>
        <td><code>locale</code></td>
        <td>The locale command allows you to customize your app based on your users' location</td>
    </tr>
    </tbody>
</table>

<p><b>Create User</b></p>

<p>To create a new user in your project, you can use the <code>create</code> command. To successfully create a user, make sure your API key is granted with the scope <code>"users.write"</code>.</p>

<div class="ide margin-bottom" data-lang="bash" data-lang-label="CLI">
    <pre class="line-numbers"><code class="prism language-bash" data-prism>appwrite users create --userId "unique()" \
    --email hello@appwrite.io \
    --password very_strong_password</code></pre>
</div>

<p><b>List Users</b></p>

<p>To get a list of all your project users, you can use the <code>list</code> command. To successfully view the list, make sure your API key is granted with the scope <code>"users.read"</code>.</p>

<div class="ide margin-bottom" data-lang="bash" data-lang-label="CLI">
    <pre class="line-numbers"><code class="prism language-bash" data-prism>appwrite users list</code></pre>
</div>

<p>In case of errors with any command, you can get more information about what went wrong using the <code>--verbose</code> flag</p>

<div class="ide margin-bottom" data-lang="bash" data-lang-label="CLI">
    <pre class="line-numbers"><code class="prism language-bash" data-prism>appwrite users list --verbose</code></pre>
</div>

<p><b>List Collections</b></p> 

<p>To get a list of all your collections, you can use the <code>listCollections</code> command. To successfully view the list, make sure your API key is granted with the scope <code>"collections.read"</code>.</p>

<div class="ide margin-bottom" data-lang="bash" data-lang-label="CLI">
    <pre class="line-numbers"><code class="prism language-bash" data-prism>appwrite databases listCollections</code></pre>
</div>

<p>If you wish to parse the output from the CLI, you can request the CLI output in JSON format using the <code>--json</code> flag</p>

<div class="ide margin-bottom" data-lang="bash" data-lang-label="CLI">
    <pre class="line-numbers"><code class="prism language-bash" data-prism>appwrite databases listCollections --json</code></pre>
</div>
<!-- Attach image of output -->

<p><b>Get a Collection</b></p>

<p>To get more information on a particular collection, you can make use of the <code>getCollection</code> command and pass in the <code>collectionId</code>.  To successfully fetch the collection, make sure your API key is granted with the scope <code>"collections.read"</code>.</p>

<div class="ide margin-bottom" data-lang="bash" data-lang-label="CLI">
    <pre class="line-numbers"><code class="prism language-bash" data-prism>appwrite databases getCollection --collectionId 5ff468cfa32a0</code></pre>
</div>

<p><b>Create Document</b></p>

<p>To create a new document in an existing collection, use the `createDocument` command.</p>

<div class="ide margin-bottom" data-lang="bash" data-lang-label="CLI">
<pre class="line-numbers"><code class="prism language-bash" data-prism>appwrite databases createDocument \
    --collectionId [COLLECTION_ID] \
    --documentId 'unique()' --data '{ "Name": "Iron Man" }' \
    --permissions 'read("any")' 'write("team:abc")' </code></pre>
</div>

<h3><a href="/docs/command-line#configuration" id="configuration">Configuration</a></h3>

<p>At any point, if you would like to change your server endpoint, project key, or self-signed certificate acceptance, use the <code>client</code> command.</p>

<div class="ide margin-bottom" data-lang="bash" data-lang-label="CLI">
    <pre class="line-numbers"><code class="prism language-bash" data-prism>appwrite client --endpoint https://[HOSTNAME_OR_IP]/v1
appwrite client --key 23f24gwrhSDgefaY
appwrite client --selfSigned true
appwrite client --reset // Resets your CLI configuration
appwrite client --debug // Prints your current configuration</code></pre>
</div>

<div class="notice margin-bottom"> 
    <h3><a href="/docs/command-line#CIMode" id="CIMode">CI Mode</a></h3>

    <p>The Appwrite CLI can also be used in a non-interactive mode. This is especially useful when you want to automate tasks on a CI Server. In order to enable CI mode on the CLI, you need to set your <b>project ID, endpoint, and API Key</b> using</p>

    <div class="ide margin-bottom" data-lang="bash" data-lang-label="CLI">
        <pre class="line-numbers"><code class="prism language-bash" data-prism>appwrite client \
    --endpoint https://[HOSTNAME_OR_IP]/v1 \
    --projectId [YOUR_PROJECT_ID] \
    --key YOUR_API_KEY</code></pre>
    </div>

    <p>When you set the global configuration parameters using the <code>client</code> command, they take precedence over the local configuration parameters in your <code>appwrite.json</code> thereby switching the CLI to non-interactive mode. </p> 

    <p>In this mode, the CLI can only interact with one project at a time. If you look closely, you'll also notice that we use an <b>API Key</b> to authenticate which means the CLI behaves like Appwrite's server SDK. You can learn more about API Keys in the <a href="/docs/getting-started-for-server#apiKey">Appwrite for Server</a> docs.</p>
</div>

<h3><a href="/docs/command-line#help" id="help">Help</a></h3>

<p>If you get stuck anywhere, you can always use the <code>help</code> command to get the usage examples.</p>

<h3><a href="/docs/command-line#uninstall" id="uninstall">Uninstall</a></h3>

<p>If you installed Appwrite CLI using NPM, you can use the following command to uninstall it.</p>

<div class="ide margin-bottom" data-lang="bash" data-lang-label="Bash">
    <pre class="line-numbers"><code class="prism language-bash" data-prism>npm uninstall -g appwrite-cli</code></pre>
</div>

<p>If you installed the Appwrite CLI with brew or the installation script for your operating system, use the following command to uninstall it.</p>

<ul class="phases clear" data-ui-phases>
    <li>
        <h4>MacOS</h4>
        <p>Using <a href="https://brew.sh" target="_blank">Homebrew</a></p>
        <div class="ide margin-bottom" data-lang="bash" data-lang-label="Bash">
            <pre class="line-numbers"><code class="prism language-bash" data-prism>brew uninstall appwrite</code></pre>
        </div>

        <p>or terminal</p>
        <div class="ide margin-bottom" data-lang="bash" data-lang-label="Bash">
            <pre class="line-numbers"><code class="prism language-bash" data-prism>rm -f /usr/local/bin/appwrite | bash</code></pre>
        </div>
    </li>
    
    <li>
        <h4>Windows</h4>
        <div class="ide margin-bottom" data-lang="powershell" data-lang-label="PowerShell">
            <pre class="line-numbers"><code class="prism language-powershell" data-prism>$APPWRITE_INSTALL_DIR = Join-Path -Path $env:LOCALAPPDATA -ChildPath "Appwrite"; Remove-Item -Force -Path $APPWRITE_INSTALL_DIR</code></pre>
        </div>
    </li>
    
    <li>
        <h4>Linux</h4>
        <div class="ide margin-bottom" data-lang="bash" data-lang-label="Bash">
            <pre class="line-numbers"><code class="prism language-bash" data-prism>rm -f /usr/local/bin/appwrite | bash</code></pre>
        </div>
    </li>
</ul>

<p>You can also remove the configuration, cookies, and API Keys the Appwrite CLI stored. To remove those, run the following command.</p>

<ul class="phases clear" data-ui-phases>
    <li>
        <h4>MacOS</h4>
        <div class="ide margin-bottom" data-lang="bash" data-lang-label="Bash">
            <pre class="line-numbers"><code class="prism language-bash" data-prism>rm -rf ~/.appwrite | bash</code></pre>
        </div>
    </li>
    
    <li>
        <h4>Windows</h4>
        <div class="ide margin-bottom" data-lang="powershell" data-lang-label="PowerShell">
            <pre class="line-numbers"><code class="prism language-powershell" data-prism>$APPWRITE_CONFIG_DIR = Join-Path -Path $env:UserProfile -ChildPath ".appwrite"; Remove-Item -Recurse -Force -Path $APPWRITE_CONFIG_DIR</code></pre>
        </div>
    </li>
    
    <li>
        <h4>Linux</h4>
        <div class="ide margin-bottom" data-lang="bash" data-lang-label="Bash">
            <pre class="line-numbers"><code class="prism language-bash" data-prism>rm -rf ~/.appwrite | bash</code></pre>
        </div>
    </li>
</ul>