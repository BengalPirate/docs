<p>
    Appwrite Functions is all about flexibility.
    Behind the simple workflow hides some useful recipes that can help you accomplish your goals faster.
    Take a look at the following.
</p>
[TODO: @matej @luke -> Let's have some simple recipes here for common actions]

<h3>Section 1: My First Function</h3>

<h4>Creating the function</h4>

<ol>
  <li>Create a new file, `index.js`.</li>
  <li>Add the following code to `index.js`. This code will return 1.13 when the function is called, because 1â‚¬ equals approximately 1.13$.

<div class="ide margin-top-small" data-lang="javascript" data-lang-label="JavaScript">
<pre class="line-numbers"><code class="prism language-js" data-prism>module.exports = async function ({ res }) {
  return res.end('1.13');
};</code></pre>
</div>

  <li>Initialize a Git repository and add `index.js` to it with the following Bash commands:

<div class="ide margin-top-small" data-lang="bash" data-lang-label="Bash">
<pre class="line-numbers"><code class="prism language-bash" data-prism>git init
git add index.js
git commit -m "Initial commit"
</code></pre>
</div>

  <li>Then, create a function in the Appwrite console and add your Git repository as the remote source.</li>
  <li>Finally, execute the function and visit the URL (like `ghrfu9ewji.functions.appwrite.app`) to see the response.</li>
</ol>

<h3>Section 2: Let's Use Payload</h3>

<h4>Updating the function</h4>

<ol>
  <li>Update `index.js` to use `req.query.amount` to calculate the conversion. The following code takes the amount in Euros from the URL and converts it to Dollars using a static conversion rate.

<div class="ide margin-top-small" data-lang="javascript" data-lang-label="JavaScript">
<pre class="line-numbers"><code class="prism language-js" data-prism>module.exports = async function ({ req, res }) {
  const amountInEuros = Number(req.query.amount);
  const amountInDollars = amountInEuros * 1.13;
  return res.end(amountInDollars.toString());
};</code></pre>
</div>

  <li>Commit your changes and push them to your Git repository.</li>
</ol>

<h4>Testing the function</h4>

<ol start="3">
  <li>Once the function is updated, you can test it by visiting the URL and providing different amounts to convert in the query string. For example, `ghrfu9ewji.functions.appwrite.app?amount=5` should return `5.65`.</li>
</ol>

<h3>Section 3: Installing Dependencies</h3>

<h4>Preparing for dependencies</h4>

<ol>
  <li>Run `npm init --yes` to create a `package.json` file. This file is used to manage your Node.js project's dependencies.</li>
  <li>Install the `undici` library with `npm install undici`. This library includes a `fetch` function that you can use to make HTTP requests.</li>
</ol>

<h4>Updating the function</h4>

<ol start="3">
  <li>Update `index.js` to use `fetch` from `undici` to get the current conversion rate. This API call will return the current conversion rate between Euros and Dollars.

<div class="ide margin-top-small" data-lang="javascript" data-lang-label="JavaScript">
<pre class="line-numbers"><code class="prism language-js" data-prism>const { fetch } = require('undici');

module.exports = async function ({ req, res }) {
  const amountInEuros = Number(req.query.amount);
  const response = await fetch('https://cdn.jsdelivr.net/gh/fawazahmed0/currency-api@1/latest/currencies/eur/usd.json');
  const data = await response.json();
  const amountInDollars = amountInEuros * data.usd;
  return res.end(amountInDollars.toString());
};</code></pre>
</div>

  <li>Commit your changes and push them to your Git repository.</li>
</ol>

<h4>Testing the function</h4>

<ol start="5">
  <li>After your function has updated, you can test it by visiting the URL and providing different amounts to convert in the query string. The conversion rate should now be more precise because we're using the current conversion rate.</li>
</ol>

<h3>Section 4: More Routes</h3>

<h4>Updating the function</h4>

<ol>
  <li>Edit `index.js` to support multiple paths like `/eur`, `/czk`, `/ft`, `/rub`. Each path will convert from that currency to dollars. Note that you will need to update the fetch URL for each new path.</li>
  <li>Commit your changes and push them to your Git repository.</li>
</ol>

<h4>Testing the function</h4>

<ol start="3">
  <li>After your function has updated, you can try out the new paths. For example, `ghrfu9ewji.functions.appwrite.app/eur?amount=5` should convert Euros to Dollars, while `ghrfu9ewji.functions.appwrite.app/czk?amount=100` should convert Czech Koruna to Dollars.</li>
</ol>

<p>Congratulations! You've built a powerful currency conversion function using Appwrite!</p>

[TODO: @luke -> translate code for other runtimes]

[TODO: @matej @luke -> Example with JWT, show both client and server code]

<!-- Here's more ideas -->

<!-- 
  How to handle different methods (POST, GET, PUT,DELETE)
  How to handle different paths (/users, /articles, ...)
  How to cache response (cache headers, json)
  How to file response (send img file, also cache it)
  How to handle HTML form submittion
  How to do basic auth (there is some header for it)
  How to recieve data in body
  How to recieve data in URL params
  How to redirect
  How to log
  How to do Bearer Auth
  How to access event data
  How to access env vars 
-->