<?php

use Appwrite\Utopia\View;

$events = $this->getParam('events', []);
$runtimes = $this->getParam('runtimes', []);

?>

<p>
    Appwrite Functions let you extend Appwrite by adding your own code and logic. 
    You can think of them as code snippets that are triggered by server events, webhooks, scheduled executions, or user invokation.
    Each function will have their own URL, execute in their own isolated container, and have their own configurable environment variables and permissions.
    With these features, Appwrite Functions unlock limitless potential to expand Appwrite's capabilities with custom logic and integrations.
</p>

<h2><a href="#gettingStarted" id="gettingStarted">Getting Started</a></h2>
<p>
    The quickest way to experience Appwrite functions is to [TODO: @matej What's a good example to show to give devs an idea of what Appwrite Functions workflow is like?]
</p>

<h2><a href="#exploreFeatures" id="exploreFeatures">Explore Features</a></h2>
<p>
    To fully harness the power of Appwrite Functions, explore the following features.
</p>

<h3><a href="#templates" id="templates">Templates</a></h3>
<p>
    If you need to integrate Appwrite with a third-party API or add a function for common utilities, 
    there might already be a function template made by the Appwrite community that fits your needs. 
    Function templates are Appwrite Functions repositories that you can clone and add to your Appwrite instance.
</p>

<p>
<a href="/docs/[TODO]"><i class="icon-angle-circled-right"></i>Learn more about using function templates</a>
</p>

<h3><a href="#deploy" id="deploy">Deploy</a></h3>
<p>
    Appwrite Functions are designed to be maintainable and fit into a familiar development workflow.
    You can deploy them from a GitHub repository branch or using the Appwrite CLI.
</p>
<p>
<a href="/docs/[TODO]"><i class="icon-angle-circled-right"></i>Learn more about using deploying functions</a>
</p>

<h3><a href="#execute" id="execute">Execute</a></h3>
<p>
Appwrite Functions can be executed directly through a request to the API, or triggered by events, webhooks, or scheduled executions. 
This flexible execution models unlocks many potential usecases for Appwrite functions.
Explore using Appwrite Functions to execute a complex routine of logic, or execute background tasks on a schedule.
</p>
<p>
<a href="/docs/[TODO]"><i class="icon-angle-circled-right"></i>Learn more about using executing functions</a>
</p>

<h3><a href="#syntax" id="syntax">Syntax</a></h3>
<p>
Writing Appwrite Functions should feel familiar to writing controllers in an HTTP server.
In your function, you'll receive a request object, add transformations and logic, then return a response.
Almost anything can be executed as code in an Appwrite Function.
<p>
<a href="/docs/[TODO]"><i class="icon-angle-circled-right"></i>Learn more about using function syntax</a>
</p>
</p>
<h3><a href="#runtime" id="runtime">Runtime</a></h3>
<p>
Appwrite supports many open-source runtimes. Find your prefered language and start writing your functions.
</p>
<p>
<a href="/docs/[TODO]"><i class="icon-angle-circled-right"></i>Learn more about using runtimes</a>
</p>
<h3><a href="#debug" id="debug">Debug</a></h3>
<p>
Let's be honest, we spend more time debugging our code than writing our code. 
So it's important to be able to log, debug, and test your Appwrite Functions in development and production.
</p>
<p>
<a href="/docs/[TODO]"><i class="icon-angle-circled-right"></i>Learn more about debugging functions</a>
</p>