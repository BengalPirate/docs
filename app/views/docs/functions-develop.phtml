<p>
    Appwrite Functions offer a familiar interface if you've developed REST endpoints.
    Each function is handled following a request and response pattern.
    Here's what you need to know to start writing your first Appwrite Function.
</p>

<div class="notice">
  <h2>Just want the code? </h2>
  <p>If you prefer to learn through examples, explore the <a href="#recipes">recipes section</a>.</p>
</div>

<h2><a href="#context" id="context">The Context Object</a></h2>
<p>
    Context is an object passed into every function to handle communication to both the end users, and logging to the Appwrite console.
    All input, output, and logging **must be** handled through the context object passed in.
</p>

<p>You'll find these properties in the context object.</p>
<table class="full text-size-small">
    <thead>
    <tr>
        <td>Property</td>
        <td>Description</td>
    </tr>
    </thead>
    <tbody>
    <tr>
        <td>context.req</td>
        <td>Contains request information like method, body, and headers. See full examples <a href="#context-req">here</a>.</td>
    </tr>
    <tr>
        <td>context.res</td>
        <td>Contains methods to build a response and return information. See full examples <a href="#context-res">here</a>.</td>
    </tr>
    <tr>
        <td>context.log</td>
        <td>Logs information to the Appwrite Console, end users will not be able to see these logs. See full examples <a href="#context-log">here</a>.</td>
    </tr>
    <tr>
        <td>context.error</td>
        <td>Logs errors to the Appwrite Console, end users will not be able to see these errors. See full examples <a href="#context-error">here</a>.</td>
        <td></td>
    </tr>
    </tbody>
</table>

<p>Some lamguages support unpacking. You'll see us use unpacking in examples, which has the following syntax.</p>
[TODO: Example below for relevant languages.]
<ul class="phases clear" data-ui-phases>
    <li>
        <h3>Node.js</h3>
        <div>
        <div class="ide margin-top-small" data-lang="javascript" data-lang-label="JavaScript">
            <pre class="line-numbers"><code class="prism language-js" data-prism>

            </code></pre>
        </div>
        </div>
    </li>
    <li>
        <h3>PHP</h3>
        <div>
        <div class="ide margin-top-small" data-lang="php" data-lang-label="PHP">
            <pre class="line-numbers"><code class="prism language-php" data-prism>

            </code></pre>
        </div>
        </div>
    </li>
    <li>
        <h3>Python</h3>
        <div>
        <div class="ide margin-top-small" data-lang="python" data-lang-label="Python">
            <pre class="line-numbers"><code class="prism language-python" data-prism>

            </code></pre>
        </div>
        </div>
    </li>
    <li>
        <h3>Ruby</h3>
        <div>
        <div class="ide margin-top-small" data-lang="ruby" data-lang-label="Ruby">
            <pre class="line-numbers"><code class="prism language-ruby" data-prism>

            </code></pre>
        </div>
        </div>
    </li>
    <li>
        <h3>Deno</h3>
        <div>
        <div class="ide margin-top-small" data-lang="typescript" data-lang-label="Deno">
            <pre class="line-numbers"><code class="prism language-typescript" data-prism>

            </code></pre>
        </div>
        </div>
    </li>
    <li>
        <h3>Dart</h3>
        <div>
        <div class="ide margin-top-small" data-lang="dart" data-lang-label="Dart">
            <pre class="line-numbers"><code class="prism language-dart" data-prism>

            </code></pre>
        </div>
        </div>
    </li>
    <li>
        <h3>Swift</h3>
        <div>
        <div class="ide margin-top-small" data-lang="swift" data-lang-label="Swift">
            <pre class="line-numbers"><code class="prism language-swift" data-prism>

            </code></pre>
        </div>
        </div>
    </li>
    <li>
        <h3>.NET</h3>
        <div>
        <div class="ide margin-top-small" data-lang="csharp" data-lang-label="C#">
            <pre class="line-numbers"><code class="prism language-csharp" data-prism>

            </code></pre>
        </div>
        </div>
    </li>
    <li>
        <h3>Kotlin</h3>
        <div>
        <div class="ide margin-top-small" data-lang="kotlin" data-lang-label="Kotlin">
            <pre class="line-numbers"><code class="prism language-kotlin" data-prism>

            </code></pre>
        </div>

        </div>
    </li>
    <li>
        <h3>Java</h3>
        <div>
        <div class="ide margin-top-small" data-lang="java" data-lang-label="Java">
            <pre class="line-numbers"><code class="prism language-java" data-prism>

            </code></pre>
        </div>
        </div>
    </li>
    <li>
        <h3>C++</h3>
        <div>
        <div class="ide margin-top-small" data-lang="cpp" data-lang-label="C++">
            <pre class="line-numbers"><code class="prism language-csharp" data-prism>

            </code></pre>
        </div>
        </div>
    </li>
</ul>

<h3><a href="#request" id="request">Request</a></h3>
<p>
    If you pass data into an Appwrite function, it'll be found in the request object. 
    This includes all invokation methods, such as data from Appwrite SDKs, HTTP calls, Appwrite events, and browsers visiting the configured domain.
    Explore the request object with the following function, which logs all request params to the Appwrite Console.
</p>

<ul class="phases clear" data-ui-phases>
    <li>
        <h3>Node.js</h3>
        <div>
        <div class="ide margin-top-small" data-lang="javascript" data-lang-label="JavaScript">
            <pre class="line-numbers"><code class="prism language-js" data-prism>export default async ({ req, res, log }) => {
    log(req.bodyString);  // Raw request body, contains request data
    log(req.body);        // Body parsed on content-type, only supports JSON
    log(req.headers);     // Request headers
    log(req.scheme);      // Value of the x-forwarded-proto header, usually http or https
    log(req.method);      // Request method, such as GET, POST, PUT, DELETE, PATCH, etc.
    log(req.url);         // Full URL, for example: http://awesome.appwrite.io:8000/v1/hooks?limit=12&offset=50
    log(req.host);        // Hostname from the host header, such as awesome.appwrite.io
    log(req.port);        // Port from the host header, for example 8000
    log(req.path);        // Path part of URL, for example /v1/hooks
    log(req.queryString); // Raw query params string. For example "limit=12&offset=50"
    log(req.query);       // Parsed query params. For example, req.query.limit

    return res.send("All the request parameters are logged to the Appwrite Console.");
};</code></pre>
        </div>
        </div>
    </li>
    <li>
        <h3>PHP</h3>
        <div>
        <div class="ide margin-top-small" data-lang="php" data-lang-label="PHP">
            <pre class="line-numbers"><code class="prism language-php" data-prism>

            </code></pre>
        </div>
        </div>
    </li>
    <li>
        <h3>Python</h3>
        <div>
        <div class="ide margin-top-small" data-lang="python" data-lang-label="Python">
            <pre class="line-numbers"><code class="prism language-python" data-prism>

            </code></pre>
        </div>
        </div>
    </li>
    <li>
        <h3>Ruby</h3>
        <div>
        <div class="ide margin-top-small" data-lang="ruby" data-lang-label="Ruby">
            <pre class="line-numbers"><code class="prism language-ruby" data-prism>

            </code></pre>
        </div>
        </div>
    </li>
    <li>
        <h3>Deno</h3>
        <div>
        <div class="ide margin-top-small" data-lang="typescript" data-lang-label="Deno">
            <pre class="line-numbers"><code class="prism language-typescript" data-prism>

            </code></pre>
        </div>
        </div>
    </li>
    <li>
        <h3>Dart</h3>
        <div>
        <div class="ide margin-top-small" data-lang="dart" data-lang-label="Dart">
            <pre class="line-numbers"><code class="prism language-dart" data-prism>

            </code></pre>
        </div>
        </div>
    </li>
    <li>
        <h3>Swift</h3>
        <div>
        <div class="ide margin-top-small" data-lang="swift" data-lang-label="Swift">
            <pre class="line-numbers"><code class="prism language-swift" data-prism>

            </code></pre>
        </div>
        </div>
    </li>
    <li>
        <h3>.NET</h3>
        <div>
        <div class="ide margin-top-small" data-lang="csharp" data-lang-label="C#">
            <pre class="line-numbers"><code class="prism language-csharp" data-prism>

            </code></pre>
        </div>
        </div>
    </li>
    <li>
        <h3>Kotlin</h3>
        <div>
        <div class="ide margin-top-small" data-lang="kotlin" data-lang-label="Kotlin">
            <pre class="line-numbers"><code class="prism language-kotlin" data-prism>

            </code></pre>
        </div>

        </div>
    </li>
    <li>
        <h3>Java</h3>
        <div>
        <div class="ide margin-top-small" data-lang="java" data-lang-label="Java">
            <pre class="line-numbers"><code class="prism language-java" data-prism>

            </code></pre>
        </div>
        </div>
    </li>
    <li>
        <h3>C++</h3>
        <div>
        <div class="ide margin-top-small" data-lang="cpp" data-lang-label="C++">
            <pre class="line-numbers"><code class="prism language-csharp" data-prism>

            </code></pre>
        </div>
        </div>
    </li>
</ul>

<h3><a href="#response" id="response">Response</a></h3>
<p>
    If you need to send a response to the invoker of the function, such as a user, client app, or an integration, use the response object.
    The response information <b>will not be logged</b> to the Appwrite Console.
    There are several possible ways to send a response, explore them in the following Appwrite Function.
</p>
<ul class="phases clear" data-ui-phases>
    <li>
        <h3>Node.js</h3>
        <div>
        <div class="ide margin-top-small" data-lang="javascript" data-lang-label="JavaScript">
            <pre class="line-numbers"><code class="prism language-js" data-prism>export default async ({ req, res, log }) => {
    switch (req.body) {
        case 'send':
            return res.send(
                "This is a text response", 
                200, 
                {
                    "content-type": "application/text"
                }
            );
        case 'json':
            return res.json(
                {
                    "type": "This is a JSON response"
                }, 
                200, 
                {
                    "content-type": "application/json"
                }
            );
        case 'redirect':
            return res.json(
                "https://appwrite.io", 
                301, 
                {
                    "content-type": "application/json"
                }
            );
        default:
            return res.empty();
    }
};</code></pre>
        </div>
        </div>
    </li>
    <li>
        <h3>PHP</h3>
        <div>
        <div class="ide margin-top-small" data-lang="php" data-lang-label="PHP">
            <pre class="line-numbers"><code class="prism language-php" data-prism>

            </code></pre>
        </div>
        </div>
    </li>
    <li>
        <h3>Python</h3>
        <div>
        <div class="ide margin-top-small" data-lang="python" data-lang-label="Python">
            <pre class="line-numbers"><code class="prism language-python" data-prism>

            </code></pre>
        </div>
        </div>
    </li>
    <li>
        <h3>Ruby</h3>
        <div>
        <div class="ide margin-top-small" data-lang="ruby" data-lang-label="Ruby">
            <pre class="line-numbers"><code class="prism language-ruby" data-prism>

            </code></pre>
        </div>
        </div>
    </li>
    <li>
        <h3>Deno</h3>
        <div>
        <div class="ide margin-top-small" data-lang="typescript" data-lang-label="Deno">
            <pre class="line-numbers"><code class="prism language-typescript" data-prism>

            </code></pre>
        </div>
        </div>
    </li>
    <li>
        <h3>Dart</h3>
        <div>
        <div class="ide margin-top-small" data-lang="dart" data-lang-label="Dart">
            <pre class="line-numbers"><code class="prism language-dart" data-prism>

            </code></pre>
        </div>
        </div>
    </li>
    <li>
        <h3>Swift</h3>
        <div>
        <div class="ide margin-top-small" data-lang="swift" data-lang-label="Swift">
            <pre class="line-numbers"><code class="prism language-swift" data-prism>

            </code></pre>
        </div>
        </div>
    </li>
    <li>
        <h3>.NET</h3>
        <div>
        <div class="ide margin-top-small" data-lang="csharp" data-lang-label="C#">
            <pre class="line-numbers"><code class="prism language-csharp" data-prism>

            </code></pre>
        </div>
        </div>
    </li>
    <li>
        <h3>Kotlin</h3>
        <div>
        <div class="ide margin-top-small" data-lang="kotlin" data-lang-label="Kotlin">
            <pre class="line-numbers"><code class="prism language-kotlin" data-prism>

            </code></pre>
        </div>

        </div>
    </li>
    <li>
        <h3>Java</h3>
        <div>
        <div class="ide margin-top-small" data-lang="java" data-lang-label="Java">
            <pre class="line-numbers"><code class="prism language-java" data-prism>

            </code></pre>
        </div>
        </div>
    </li>
    <li>
        <h3>C++</h3>
        <div>
        <div class="ide margin-top-small" data-lang="cpp" data-lang-label="C++">
            <pre class="line-numbers"><code class="prism language-csharp" data-prism>

            </code></pre>
        </div>
        </div>
    </li>
</ul>

<h3><a href="#logging" id="logging">Logging</a></h3>
<p>
    To protect user privacy, the request and response objects are not logged to the Appwrite Console by default.
    This means, to see logs or debug function executions you need to use the <code>context.log()</code> and <code>context.error()</code> methods.
    These logs are only visible to developers with access to the Appwrite Console.
</p>

<p>Here's an example of using logs and errors.</p>
[TODO]
<p>You can access these logs through the following steps.</p>
[TODO]
<h2><a href="#environment-variables" id="environment-variables">Accessing Environment Variables</a></h2>
<p>
    If you need to pass constants or secrets to Appwrite Functions, you can use environment variables.
</p>
[TODO: ways to setup environment variables (link to deployment docs?)]

<p>
    You can access the environment variables through the systems library of each language.
</p>

<h2><a href="#dependencies" id="dependencies">Depencies</a></h2>

<h2><a href="#appwrite" id="appwrite">Using Appwrite in a Function</a></h2>
[TODO: 2 examples -> JWT and API keys]

<h2><a href="#recipes" id="recipes">Recipes</a></h2>
[TODO: Matej and Luke write examples]

<h2><a href="#limitations" id="limitations">Limitations</a></h2>
<!-- <p>Libraries dependent on</p> -->