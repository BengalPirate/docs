<p>
    Appwrite Functions offer a familiar interface if you've developed REST endpoints.
    Each function is handled following a request and response pattern.
    Here's what you need to know to start writing your first Appwrite Function.
</p>

<div class="notice">
  <h2>Just want the code? </h2>
  <p>If you prefer to learn through examples, explore the <a href="#recipes">recipes section</a>.</p>
</div>

<h2>Function Flow</h2>
<p>
    There is a clear flow for all Appwrite Functions, from beginning to end.
    Here's everything that happens during a function execution.
</p>

<ol class="margin-top margin-bottom-large text-size-normal">
	<li>Invocation, where Appwrite receives a event to execute a Function. This event could be a request from an SDK, a request to the function's domain, a scheduled execution, or an execution triggered by an event within your Appwrite project.</li>
	<li>After a function is invoked, Appwrite passes request information to your function's executor.</li>
	<li>The executor runs the function code you deployed and waits for it to return.</li>
	<li>Function terminates either when the user returns with a method from <code>context.res</code>, when the user code throws an exception, or times out.</li>
</ol>


<h2><a href="#context" id="context">The Context Object</a></h2>
<p>
    Context is an object passed into every function to handle communication to both the end users, and logging to the Appwrite console.
    All input, output, and logging **must be** handled through the context object passed in.
</p>

<p>You'll find these properties in the context object.</p>
<table class="full text-size-small">
    <thead>
    <tr>
        <td>Property</td>
        <td>Description</td>
    </tr>
    </thead>
    <tbody>
    <tr>
        <td><code>context.req</code></td>
        <td>Contains request information like method, body, and headers. See full examples <a href="#context-req">here</a>.</td>
    </tr>
    <tr>
        <td><code>context.res</code></td>
        <td>Contains methods to build a response and return information. See full examples <a href="#context-res">here</a>.</td>
    </tr>
    <tr>
        <td><code>context.log</code></td>
        <td>Logs information to the Appwrite Console, end users will not be able to see these logs. See full examples <a href="#context-log">here</a>.</td>
    </tr>
    <tr>
        <td><code>context.error</code></td>
        <td>Logs errors to the Appwrite Console, end users will not be able to see these errors. See full examples <a href="#context-error">here</a>.</td>
        <td></td>
    </tr>
    </tbody>
</table>

<p>Some languages, namely JavaScript, support destructuring. You'll see us use destructing in examples, which has the following syntax.</p>
<ul class="phases clear" data-ui-phases>
    <li>
        <h3>Node.js</h3>
        <div>
        <div class="ide margin-top-small" data-lang="javascript" data-lang-label="JavaScript">
            <pre class="line-numbers"><code class="prism language-js" data-prism>export default async function ({ req, res, log, error }) {
    log('This is a log!');
    error('This is an error!');
    return res.send(`This function was called with ${req.method} method!`)
}</code></pre>
        </div>
        </div>
    </li>
    <li>
        <h3>Deno</h3>
        <div>
        <div class="ide margin-top-small" data-lang="typescript" data-lang-label="Deno">
            <pre class="line-numbers"><code class="prism language-typescript" data-prism>export default async function ({ req, res, log, error }: any) {
    log('This is a log!');
    error('This is an error!');
    return res.send(`This function was called with ${req.method} method!`)
}</code></pre>
        </div>
        </div>
    </li>
</ul>

<h3><a href="#request" id="request">Request</a></h3>
<p>
    If you pass data into an Appwrite function, it'll be found in the request object. 
    This includes all invokation methods, such as data from Appwrite SDKs, HTTP calls, Appwrite events, and browsers visiting the configured domain.
    Explore the request object with the following function, which logs all request params to the Appwrite Console.
</p>

<ul class="phases clear" data-ui-phases>
    <li>
        <h3>Node.js</h3>
        <div>
        <div class="ide margin-top-small" data-lang="javascript" data-lang-label="JavaScript">
            <pre class="line-numbers"><code class="prism language-js" data-prism>export default async ({ req, res, log }) => {
    log(req.bodyRaw);                     // Raw request body, contains request data
    log(JSON.stringify(req.body));        // Object from parsed JSON request body, otherwise string
    log(JSON.stringify(req.headers));     // String key-value pairs of all request headers, keys are lowercase
    log(req.scheme);                      // Value of the x-forwarded-proto header, usually http or https
    log(req.method);                      // Request method, such as GET, POST, PUT, DELETE, PATCH, etc.
    log(req.url);                         // Full URL, for example: http://awesome.appwrite.io:8000/v1/hooks?limit=12&offset=50
    log(req.host);                        // Hostname from the host header, such as awesome.appwrite.io
    log(req.port);                        // Port from the host header, for example 8000
    log(req.path);                        // Path part of URL, for example /v1/hooks
    log(req.queryString);                 // Raw query params string. For example "limit=12&offset=50"
    log(req.query);                       // Parsed query params. For example, req.query.limit

    return res.send("All the request parameters are logged to the Appwrite Console.");
};</code></pre>
        </div>
        </div>
    </li>
    <li>
        <h3>PHP</h3>
        <div>
        <div class="ide margin-top-small" data-lang="php" data-lang-label="PHP">
            <pre class="line-numbers"><code class="prism language-php" data-prism>&lt;?php
return function ($context) {
    $context->log($context->req->bodyRaw);              // Raw request body, contains request data
    $context->log(json_encode($context->req->body));    // Object from parsed JSON request body, otherwise string
    $context->log(json_encode($context->req->headers)); // String key-value pairs of all request headers, keys are lowercase
    $context->log($context->req->scheme);               // Value of the x-forwarded-proto header, usually http or https
    $context->log($context->req->method);               // Request method, such as GET, POST, PUT, DELETE, PATCH, etc.
    $context->log($context->req->url);                  // Full URL, for example: http://awesome.appwrite.io:8000/v1/hooks?limit=12&offset=50
    $context->log($context->req->host);                 // Hostname from the host header, such as awesome.appwrite.io
    $context->log($context->req->port);                 // Port from the host header, for example 8000
    $context->log($context->req->path);                 // Path part of URL, for example /v1/hooks
    $context->log($context->req->queryString);          // Raw query params string. For example "limit=12&offset=50"
    $context->log(json_encode($context->req->query));   // Parsed query params. For example, req.query.limit

    return $context->res->send("All the request parameters are logged to the Appwrite Console.");
}</code></pre>
        </div>
        </div>
    </li>
    <li>
        <h3>Python</h3>
        <div>
        <div class="ide margin-top-small" data-lang="python" data-lang-label="Python">
            <pre class="line-numbers"><code class="prism language-python" data-prism>import json

def main(context):
    context.log(context.req.bodyRaw)             # Raw request body, contains request data
    context.log(json.dumps(context.req.body))    # Object from parsed JSON request body, otherwise string
    context.log(json.dumps(context.req.headers)) # String key-value pairs of all request headers, keys are lowercase
    context.log(context.req.scheme)              # Value of the x-forwarded-proto header, usually http or https
    context.log(context.req.method)              # Request method, such as GET, POST, PUT, DELETE, PATCH, etc.
    context.log(context.req.url)                 # Full URL, for example: http://awesome.appwrite.io:8000/v1/hooks?limit=12&offset=50
    context.log(context.req.host)                # Hostname from the host header, such as awesome.appwrite.io
    context.log(context.req.port)                # Port from the host header, for example 8000
    context.log(context.req.path)                # Path part of URL, for example /v1/hooks
    context.log(context.req.queryString)         # Raw query params string. For example "limit=12&offset=50"
    context.log(json.dumps(context.req.query))   # Parsed query params. For example, req.query.limit

    return context.res.send("All the request parameters are logged to the Appwrite Console.")</code></pre>
        </div>
        </div>
    </li>
    <li>
        <h3>Ruby</h3>
        <div>
        <div class="ide margin-top-small" data-lang="ruby" data-lang-label="Ruby">
            <pre class="line-numbers"><code class="prism language-ruby" data-prism>require 'json'
                
def main(context)
    context.log(context.req.bodyRaw)                #  Raw request body, contains request data
    context.log(JSON.generate(context.req.body))    # Object from parsed JSON request body, otherwise string
    context.log(JSON.generate(context.req.headers)) # String key-value pairs of all request headers, keys are lowercase
    context.log(context.req.scheme)                 # Value of the x-forwarded-proto header, usually http or https
    context.log(context.req.method)                 # Request method, such as GET, POST, PUT, DELETE, PATCH, etc.
    context.log(context.req.url)                    # Full URL, for example: http://awesome.appwrite.io:8000/v1/hooks?limit=12&offset=50
    context.log(context.req.host)                   # Hostname from the host header, such as awesome.appwrite.io
    context.log(context.req.port)                   # Port from the host header, for example 8000
    context.log(context.req.path)                   # Path part of URL, for example /v1/hooks
    context.log(context.req.queryString)            # Raw query params string. For example "limit=12&offset=50"
    context.log(JSON.generate(context.req.query))   # Parsed query params. For example, req.query.limit

    return context.res.send("All the request parameters are logged to the Appwrite Console.")
end</code></pre>
        </div>
        </div>
    </li>
    <li>
        <h3>Deno</h3>
        <div>
        <div class="ide margin-top-small" data-lang="typescript" data-lang-label="Deno">
            <pre class="line-numbers"><code class="prism language-typescript" data-prism>export default async ({ req, res, log }: any) => {
    log(req.bodyRaw);                 // Raw request body, contains request data
    log(JSON.stringify(req.body));    // Object from parsed JSON request body, otherwise string
    log(JSON.stringify(req.headers)); // String key-value pairs of all request headers, keys are lowercase
    log(req.scheme);                  // Value of the x-forwarded-proto header, usually http or https
    log(req.method);                  // Request method, such as GET, POST, PUT, DELETE, PATCH, etc.
    log(req.url);                     // Full URL, for example: http://awesome.appwrite.io:8000/v1/hooks?limit=12&offset=50
    log(req.host);                    // Hostname from the host header, such as awesome.appwrite.io
    log(req.port);                    // Port from the host header, for example 8000
    log(req.path);                    // Path part of URL, for example /v1/hooks
    log(req.queryString);             // Raw query params string. For example "limit=12&offset=50"
    log(req.query);                   // Parsed query params. For example, req.query.limit

    return res.send("All the request parameters are logged to the Appwrite Console.");</code></pre>
        </div>
        </div>
    </li>
    <li>
        <h3>Dart</h3>
        <div>
        <div class="ide margin-top-small" data-lang="dart" data-lang-label="Dart">
            <pre class="line-numbers"><code class="prism language-dart" data-prism>import 'dart:async';
import 'dart:convert';

Future&lt;dynamic> main(final context) async {
    context.log(context.req.bodyRaw);              // Raw request body, contains request data
    context.log(json.encode(context.req.body));    // Object from parsed JSON request body, otherwise string
    context.log(json.encode(context.req.headers)); // String key-value pairs of all request headers, keys are lowercase
    context.log(context.req.scheme);               // Value of the x-forwarded-proto header, usually http or https
    context.log(context.req.method);               // Request method, such as GET, POST, PUT, DELETE, PATCH, etc.
    context.log(context.req.url);                  // Full URL, for example: http://awesome.appwrite.io:8000/v1/hooks?limit=12&offset=50
    context.log(context.req.host);                 // Hostname from the host header, such as awesome.appwrite.io
    context.log(context.req.port);                 // Port from the host header, for example 8000
    context.log(context.req.path);                 // Path part of URL, for example /v1/hooks
    context.log(context.req.queryString);          // Raw query params string. For example "limit=12&offset=50"
    context.log(json.encode(context.req.query));   // Parsed query params. For example, req.query.limit

    return context.res.send("All the request parameters are logged to the Appwrite Console.");
}</code></pre>
        </div>
        </div>
    </li>
    <li>
        <h3>Swift</h3>
        <div>
        <div class="ide margin-top-small" data-lang="swift" data-lang-label="Swift">
            <pre class="line-numbers"><code class="prism language-swift" data-prism>import Foundation
import Foundation

func main(context: RuntimeContext) async throws -> RuntimeOutput {
    context.log(context.req.bodyRaw)                                                     // Raw request body, contains request data
    context.log(NSJSONSerialization.jsonObject(with: context.req.body, options: [])!)    // Object from parsed JSON request body, otherwise string
    context.log(NSJSONSerialization.jsonObject(with: context.req.headers, options: [])!) // String key-value pairs of all request headers, keys are lowercase
    context.log(context.req.scheme)                                                      // Value of the x-forwarded-proto header, usually http or https
    context.log(context.req.method)                                                      // Request method, such as GET, POST, PUT, DELETE, PATCH, etc.
    context.log(context.req.url)                                                         // Full URL, for example: http://awesome.appwrite.io:8000/v1/hooks?limit=12&offset=50 
    context.log(context.req.host)                                                        // Hostname from the host header, such as awesome.appwrite.io
    context.log(context.req.port)                                                        // Port from the host header, for example 8000
    context.log(context.req.path)                                                        // Path part of URL, for example /v1/hooks
    context.log(context.req.queryString)                                                 // Raw query params string. For example "limit=12&offset=50"
    context.log(NSJSONSerialization.jsonObject(with: context.req.query, options: [])!)   // Parsed query params. For example, req.query.limit

    return try context.res.send("All the request parameters are logged to the Appwrite Console.")
}</code></pre>
        </div>
        </div>
    </li>
    <li>
        <h3>.NET</h3>
        <div>
        <div class="ide margin-top-small" data-lang="csharp" data-lang-label="C#">
            <pre class="line-numbers"><code class="prism language-csharp" data-prism>namespace DotNetRuntime;

using System.Text.Json;

public class Handler {
    public async Task&lt;RuntimeOutput> Main(RuntimeContext Context) 
    {
        Context.Log(Context.Req.BodyRaw);                                                     // Raw request body, contains request data
        Context.Log(JsonSerializer.Serialize&lt;object>(Context.Req.Body));                 // Object from parsed JSON request body, otherwise string
        Context.Log(JsonSerializer.Serialize&lt;object>(Context.Req.Headers));              // String key-value pairs of all request headers, keys are lowercase
        Context.Log(Context.Req.Scheme);                                                      // Value of the x-forwarded-proto header, usually http or https
        Context.Log(Context.Req.Method);                                                      // Request method, such as GET, POST, PUT, DELETE, PATCH, etc.
        Context.Log(Context.Req.Url);                                                         // Full URL, for example: http://awesome.appwrite.io:8000/v1/hooks?limit=12&offset=50
        Context.Log(Context.Req.Host);                                                        // Hostname from the host header, such as awesome.appwrite.io
        Context.Log(Context.Req.Port);                                                        // Port from the host header, for example 8000
        Context.Log(Context.Req.Path);                                                        // Path part of URL, for example /v1/hooks
        Context.Log(Context.Req.QueryString);                                                 // Raw query params string. For example "limit=12&offset=50"
        Context.Log(JsonSerializer.Serialize&lt;object>(Context.Req.Query));                // Parsed query params. For example, req.query.limit

        return Context.Res.Send("All the request parameters are logged to the Appwrite Console.");
    }
}</code></pre>
        </div>
        </div>
    </li>
    <li>
        <h3>Kotlin</h3>
        <div>
        <div class="ide margin-top-small" data-lang="kotlin" data-lang-label="Kotlin">
            <pre class="line-numbers"><code class="prism language-kotlin" data-prism>package io.openruntimes.kotlin.src

import io.openruntimes.kotlin.RuntimeContext
import io.openruntimes.kotlin.RuntimeOutput
import com.google.gson.Gson

class Main {
    fun main(context: RuntimeContext): RuntimeOutput {
        val gson = Gson()

        context.log(context.req.bodyRaw)                // Raw request body, contains request data
        context.log(gson.toString(context.req.body))    // Object from parsed JSON request body, otherwise string
        context.log(gson.toString(context.req.headers)) // String key-value pairs of all request headers, keys are lowercase
        context.log(context.req.scheme)                 // Value of the x-forwarded-proto header, usually http or https
        context.log(context.req.method)                 // Request method, such as GET, POST, PUT, DELETE, PATCH, etc.
        context.log(context.req.url)                    // Full URL, for example: http://awesome.appwrite.io:8000/v1/hooks?limit=12&offset=50
        context.log(context.req.host)                   // Hostname from the host header, such as awesome.appwrite.io
        context.log(context.req.port)                   // Port from the host header, for example 8000
        context.log(context.req.path)                   // Path part of URL, for example /v1/hooks
        context.log(context.req.queryString)            // Raw query params string. For example "limit=12&offset=50"
        context.log(gson.toString(context.req.query))   // Parsed query params. For example, req.query.limit

        return context.res.send("All the request parameters are logged to the Appwrite Console.")
    }
}</code></pre>
        </div>

        </div>
    </li>
    <li>
        <h3>Java</h3>
        <div>
        <div class="ide margin-top-small" data-lang="java" data-lang-label="Java">
            <pre class="line-numbers"><code class="prism language-java" data-prism>package io.openruntimes.java;

import com.google.gson.Gson;
import io.openruntimes.java.models.RuntimeContext;
import io.openruntimes.java.models.RuntimeOutput;

public class Main {
    public RuntimeOutput main(RuntimeContext context) {
        Gson gson = new Gson();

        context.log(context.getReq().getBodyRaw());                // Raw request body, contains request data
        context.log(gson.toString(context.getReq().getBody()));    // Object from parsed JSON request body, otherwise string
        context.log(gson.toString(context.getReq().getHeaders())); // String key-value pairs of all request headers, keys are lowercase
        context.log(context.getReq().getScheme());                 // Value of the x-forwarded-proto header, usually http or https
        context.log(context.getReq().getMethod());                 // Request method, such as GET, POST, PUT, DELETE, PATCH, etc.
        context.log(context.getReq().getUrl());                    // Full URL, for example: http://awesome.appwrite.io:8000/v1/hooks?limit=12&offset=50
        context.log(context.getReq().getHost());                   // Hostname from the host header, such as awesome.appwrite.io
        context.log(context.getReq().getPort());                   // Port from the host header, for example 8000
        context.log(context.getReq().getPath());                   // Path part of URL, for example /v1/hooks
        context.log(context.getReq().getQueryString());            // Raw query params string. For example "limit=12&offset=50"
        context.log(gson.toString(context.getReq().getQuery()));   // Parsed query params. For example, req.query.limit

        return context.getRes().send("All the request parameters are logged to the Appwrite Console.");
    }
}</code></pre>
        </div>
        </div>
    </li>
</ul>

<h3><a href="#response" id="response">Response</a></h3>
<p>
    If you need to send a response to the invoker of the function, such as a user, client app, or an integration, use the response object.
    The response information <b>will not be logged</b> to the Appwrite Console.
    There are several possible ways to send a response, explore them in the following Appwrite Function.
</p>

<ul class="phases clear" data-ui-phases>
    <li>
        <h3>Node.js</h3>
        <div>
        <div class="ide margin-top-small" data-lang="javascript" data-lang-label="JavaScript">
            <pre class="line-numbers"><code class="prism language-js" data-prism>export default async ({ req, res, log }) => {

    switch (req.query.type) {
        case 'text':
            return res.send(
                "This is a text response", 
                200
            );
        case 'json':
            return res.json(
                {
                    "type": "This is a JSON response"
                }, 
                200
            );
        case 'redirect':
            return res.redirect(
                "https://appwrite.io", 
                301
            );
        case 'html':
            return res.send(
                "&lt;h1&gt;This is an HTML response&lt;/h1&gt;", 
                200,
                {
                    "content-type": "text/html"
                }
            );
        default:
            return res.empty();
    }
}</code></pre>
        </div>
        </div>
    </li>
    <li>
        <h3>PHP</h3>
        <div>
        <div class="ide margin-top-small" data-lang="php" data-lang-label="PHP">
            <pre class="line-numbers"><code class="prism language-php" data-prism>&lt;?php

return function ($context) {
    switch ($context->req->query['type']) {
        case 'text':
            return $context->res->send(
                "This is a text response", 
                200
            );
        case 'json':
            return $context->res->json(
                [
                    "type" => "This is a JSON response"
                ], 
                200
            );
        case 'redirect':
            return $context->res->redirect(
                "https://appwrite.io", 
                301
            );
        case 'html':
            return $context->res->send(
                "&lt;h1&gt;This is an HTML response&lt;/h1&gt;", 
                200,
                [
                    "content-type" => "text/html"
                ]
            );
        default:
            return $context->res->empty();
    }
};</code></pre>
        </div>
        </div>
    </li>
    <li>
        <h3>Python</h3>
        <div>
        <div class="ide margin-top-small" data-lang="python" data-lang-label="Python">
            <pre class="line-numbers"><code class="prism language-python" data-prism>def main(context):
    switch context.req.query['type']:
        case 'text':
            return context.res.send(
                "This is a text response", 
                200
            )
        case 'json':
            return context.res.json(
                {
                    "type": "This is a JSON response"
                }, 
                200
            )
        case 'redirect':
            return context.res.redirect(
                "https://appwrite.io", 
                301
            )
        case 'html':
            return context.res.send(
                "&lt;h1&gt;This is an HTML response&lt;/h1&gt;", 
                200,
                {
                    "content-type": "text/html"
                }
            )
        default:
            return context.res.empty()</code></pre>
        </div>
        </div>
    </li>
    <li>
        <h3>Ruby</h3>
        <div>
        <div class="ide margin-top-small" data-lang="ruby" data-lang-label="Ruby">
            <pre class="line-numbers"><code class="prism language-ruby" data-prism>def main(context)
    case context.req.query['type']
        when 'text'
            return context.res.send(
                "This is a text response", 
                200
            )
        when 'json'
            return context.res.json(
                {
                    "type": "This is a JSON response"
                }, 
                200
            )
        when 'redirect'
            return context.res.redirect(
                "https://appwrite.io", 
                301
            )
        when 'html'
            return context.res.send(
                "&lt;h1&gt;This is an HTML response&lt;/h1&gt;", 
                200,
                {
                    "content-type": "text/html"
                }
            )
        else
            return context.res.empty()
    end
end</code></pre>
        </div>
        </div>
    </li>
    <li>
        <h3>Deno</h3>
        <div>
        <div class="ide margin-top-small" data-lang="typescript" data-lang-label="Deno">
            <pre class="line-numbers"><code class="prism language-typescript" data-prism>export default async ({ req, res, log }) => {

    switch (req.query.type) {
        case 'text':
            return res.send(
                "This is a text response", 
                200
            );
        case 'json':
            return res.json(
                {
                    "type": "This is a JSON response"
                }, 
                200
            );
        case 'redirect':
            return res.redirect(
                "https://appwrite.io", 
                301
            );
        case 'html':
            return res.send(
                "&lt;h1&gt;This is an HTML response&lt;/h1&gt;", 
                200,
                {
                    "content-type": "text/html"
                }
            );
        default:
            return res.empty();
    }
}</code></pre>
        </div>
        </div>
    </li>
    <li>
        <h3>Dart</h3>
        <div>
        <div class="ide margin-top-small" data-lang="dart" data-lang-label="Dart">
            <pre class="line-numbers"><code class="prism language-dart" data-prism>import 'dart:async';

Future&lt;dynamic> main(final context) async {
    switch (context.req.query['type']) {
        case 'text':
            return context.res
                .send('This is a text response', 200);
        case 'json':
            return context.res
                .json({
                    'type': 'This is a JSON response'
                });
        case 'redirect':
            return context.res
                .redirect('https://appwrite.io', 301);
        case 'html':
            return context.res
                .send('&lt;h1&gt;This is an HTML response&lt;/h1&gt;', 200, {
                    'content-type': 'text/html'
                });
        default:
            return context.res
                .empty();
    }
}</code></pre>
        </div>
        </div>
    </li>
    <li>
        <h3>Swift</h3>
        <div>
        <div class="ide margin-top-small" data-lang="swift" data-lang-label="Swift">
            <pre class="line-numbers"><code class="prism language-swift" data-prism>import Foundation

func main(context: RuntimeContext) async throws -> RuntimeOutput {
    switch context.req.query["type"] {
        case "text":
            return try await context.send("This is a text response", 200)
        case "json":
            return try await context.send(["type": "This is a JSON response"], 200)
        case "redirect":
            return try await context.redirect("https://appwrite.io", 301)
        case "html":
            return try await context.send("&lt;h1&gt;This is an HTML response&lt;/h1&gt;", 200, ["content-type": "text/html"])
        default:
            return try await context.empty()
    }
}</code></pre>
        </div>
        </div>
    </li>
    <li>
        <h3>.NET</h3>
        <div>
        <div class="ide margin-top-small" data-lang="csharp" data-lang-label="C#">
            <pre class="line-numbers"><code class="prism language-csharp" data-prism>namespace DotNetRuntime;

public class Handler {
    public async Task&lt;RuntimeOutput> Main(RuntimeContext Context) 
    {
        switch (Context.Request.Query["type"])
        {
            case "text":
                return await Context.Send("This is a text response", 200);
            case "json":
                return await Context.Send(new Dictionary&lt;string, object&gt;() { { "type", "This is a JSON response" } }, 200);
            case "redirect":
                return await Context.Redirect("https://appwrite.io", 301);
            case "html":
                return await Context.Send("&lt;h1&gt;This is an HTML response&lt;/h1&gt;", 200, new Dictionary&lt;string, string&gt;() { { "content-type", "text/html" } });
            default:    
                return await Context.Empty();
        }
    }
}</code></pre>
        </div>
        </div>
    </li>
    <li>
        <h3>Kotlin</h3>
        <div>
        <div class="ide margin-top-small" data-lang="kotlin" data-lang-label="Kotlin">
            <pre class="line-numbers"><code class="prism language-kotlin" data-prism>package io.openruntimes.kotlin.src

import io.openruntimes.kotlin.RuntimeContext
import io.openruntimes.kotlin.RuntimeOutput

class Main {
    fun main(context: RuntimeContext): RuntimeOutput {
        when (context.req.query["type"]) {
            "text" -> return context.send("This is a text response", 200)
            "json" -> return context.send(mapOf("type" to "This is a JSON response"), 200)
            "redirect" -> return context.redirect("https://appwrite.io", 301)
            "html" -> return context.send("&lt;h1&gt;This is an HTML response&lt;/h1&gt;", 200, mapOf("content-type" to "text/html"))
            else -> return context.empty()
        }
    }
}</code></pre>
        </div>
        </div>
    </li>
    <li>
        <h3>Java</h3>
        <div>
        <div class="ide margin-top-small" data-lang="java" data-lang-label="Java">
            <pre class="line-numbers"><code class="prism language-java" data-prism>package io.openruntimes.java.src;

import io.openruntimes.java.RuntimeContext;
import io.openruntimes.java.RuntimeOutput;
import java.util.Map;
import java.util.HashMap;

public class Main {
    public RuntimeOutput main(RuntimeContext context) throws Exception {
        switch (context.getReq().getQuery()["type"]) {
            case "text":
                return context.send("This is a text response", 200);
            case "json":
                HashMap&lt;String, Object&gt; data = new HashMap&lt;&gt;();
                data.put("type", "This is a JSON response");
                return context.send(data, 200);
            case "redirect":
                return context.redirect("https://appwrite.io", 301);
            case "html":
                return context.send("&lt;h1&gt;This is an HTML response&lt;/h1&gt;", 200, Map.of("content-type", "text/html"));
            default:
                return context.empty();
        }
    }
}</code></pre>
        </div>
        </div>
    </li>
    <li>
        <h3>C++</h3>
        <div>
        <div class="ide margin-top-small" data-lang="cpp" data-lang-label="C++">
            <pre class="line-numbers"><code class="prism language-csharp" data-prism>#include "../RuntimeResponse.h"
#include "../RuntimeRequest.h"
#include "../RuntimeOutput.h"
#include "../RuntimeContext.h"

namespace runtime {
  class Handler {
    public:
      static RuntimeOutput main(RuntimeContext &context) {
        std::string type = context.req.query["type"];

        if (type == "text") {
          return context.send("This is a text response", 200);
        } else if (type == "json") {
          Json::Value data;
          data["type"] = "This is a JSON response";
          return context.send(data, 200);
        } else if (type == "redirect") {
          return context.redirect("https://appwrite.io", 301);
        } else if (type == "html") {
          Json::Value headers;
          headers["content-type"] = "text/html";
          return context.send("&lt;h1&gt;This is an HTML response&lt;/h1&gt;", 200, headers);
        } else {
          return context.empty();
        }
      }
  };
}</code></pre>
        </div>
        </div>
    </li>
</ul>

<h3><a href="#logging" id="logging">Logging</a></h3>
<p>
    To protect user privacy, the request and response objects are not logged to the Appwrite Console by default.
    This means, to see logs or debug function executions you need to use the <code>context.log()</code> and <code>context.error()</code> methods.
    These logs are only visible to developers with access to the Appwrite Console.
</p>

<p>Here's an example of using logs and errors.</p>
[TODO: @luke Let's make sure we show an example for evert runtime with good string manip methods.]
<ul class="phases clear" data-ui-phases>
    <li>
        <h3>Node.js</h3>
        <div>
        <div class="ide margin-top-small" data-lang="javascript" data-lang-label="JavaScript">
            <pre class="line-numbers"><code class="prism language-js" data-prism>export default async ({ res, log, error }) => {
    log("This is a log, use for logging information to console");
    error("This is an error, use for logging errors to console");

    return res.send("Check the Appwrite Console to see logs and errors!");
};</code></pre>
        </div>
        </div>
    </li>
    <li>
        <h3>PHP</h3>
        <div>
        <div class="ide margin-top-small" data-lang="php" data-lang-label="PHP">
            <pre class="line-numbers"><code class="prism language-php" data-prism>

            </code></pre>
        </div>
        </div>
    </li>
    <li>
        <h3>Python</h3>
        <div>
        <div class="ide margin-top-small" data-lang="python" data-lang-label="Python">
            <pre class="line-numbers"><code class="prism language-python" data-prism>

            </code></pre>
        </div>
        </div>
    </li>
    <li>
        <h3>Ruby</h3>
        <div>
        <div class="ide margin-top-small" data-lang="ruby" data-lang-label="Ruby">
            <pre class="line-numbers"><code class="prism language-ruby" data-prism>

            </code></pre>
        </div>
        </div>
    </li>
    <li>
        <h3>Deno</h3>
        <div>
        <div class="ide margin-top-small" data-lang="typescript" data-lang-label="Deno">
            <pre class="line-numbers"><code class="prism language-typescript" data-prism>

            </code></pre>
        </div>
        </div>
    </li>
    <li>
        <h3>Dart</h3>
        <div>
        <div class="ide margin-top-small" data-lang="dart" data-lang-label="Dart">
            <pre class="line-numbers"><code class="prism language-dart" data-prism>

            </code></pre>
        </div>
        </div>
    </li>
    <li>
        <h3>Swift</h3>
        <div>
        <div class="ide margin-top-small" data-lang="swift" data-lang-label="Swift">
            <pre class="line-numbers"><code class="prism language-swift" data-prism>

            </code></pre>
        </div>
        </div>
    </li>
    <li>
        <h3>.NET</h3>
        <div>
        <div class="ide margin-top-small" data-lang="csharp" data-lang-label="C#">
            <pre class="line-numbers"><code class="prism language-csharp" data-prism>

            </code></pre>
        </div>
        </div>
    </li>
    <li>
        <h3>Kotlin</h3>
        <div>
        <div class="ide margin-top-small" data-lang="kotlin" data-lang-label="Kotlin">
            <pre class="line-numbers"><code class="prism language-kotlin" data-prism>

            </code></pre>
        </div>

        </div>
    </li>
    <li>
        <h3>Java</h3>
        <div>
        <div class="ide margin-top-small" data-lang="java" data-lang-label="Java">
            <pre class="line-numbers"><code class="prism language-java" data-prism>

            </code></pre>
        </div>
        </div>
    </li>
    <li>
        <h3>C++</h3>
        <div>
        <div class="ide margin-top-small" data-lang="cpp" data-lang-label="C++">
            <pre class="line-numbers"><code class="prism language-csharp" data-prism>

            </code></pre>
        </div>
        </div>
    </li>
</ul>
<p>You can access these logs through the following steps.</p>
<ol class="margin-top margin-bottom-large text-size-normal">
	<li>In Appwrite Console, navigate to <b>Functions</b>.</li>
    <li>Click to open a function you wish to inspect.</li>
    <li>Under the <b>Executions</b> tab, click on an execution.</li>
    <li>In the <b>Response</b> section, you'll be able to view logs under the <b>Logs</b> and <b>Errors</b> tabs.</li>
</ol>

<h2><a href="#environment-variables" id="environment-variables">Accessing Environment Variables</a></h2>
<p>
    If you need to pass constants or secrets to Appwrite Functions, you can use environment variables.
    Environmental variables can be global, or function specific.
</p>

<h3>Local Environment Variables</h3>
<p>
    Local variables will only be accessible in the function they belong to. 
    Local variables will override global variables when they have conflicting names.
</p>
<ol class="margin-top margin-bottom-large text-size-normal">
    <li>In Appwrite Console, navigate to <b>Functions</b>.</li>
    <li>Click to open a function you wish to add variables to.</li>
	<li>Under the <b>Settings</b> tab, navigate to <b>Environment variables</b>.</li>
    <li>Create an environment variable by clicking <b>Create variable</b>, using the <b>Editor</b>, or import new variables through a <code>.env</code> file.</li>
</ol>

<h3>Global Variables</h3>
<p>
    Global variables are accessible to all Appwrite Functions. 
    Local variables will override global variables when they have conflicting names.
</p>
<ol class="margin-top margin-bottom-large text-size-normal">
    <li>In Appwrite Console, navigate to your project's <b>Settings</b> page.</li>
	<li>Navigate to <b>Global variables</b> section.</li>
    <li>Create an environment variable by clicking <b>Create variable</b>, using the <b>Editor</b>, or import new variables through a <code>.env</code> file.</li>
</ol>

<p>
    You can access the environment variables through the systems library of each language.
</p>

<ul class="phases clear" data-ui-phases>
    <li>
        <h3>Node.js</h3>
        <div>
        <div class="ide margin-top-small" data-lang="javascript" data-lang-label="JavaScript">
            <pre class="line-numbers"><code class="prism language-js" data-prism>process.env.MY_VAR</code></pre>
        </div>
        </div>
    </li>
    <li>
        <h3>PHP</h3>
        <div>
        <div class="ide margin-top-small" data-lang="php" data-lang-label="PHP">
            <pre class="line-numbers"><code class="prism language-php" data-prism>getenv('MY_VAR')</code></pre>
        </div>
        </div>
    </li>
    <li>
        <h3>Python</h3>
        <div>
        <div class="ide margin-top-small" data-lang="python" data-lang-label="Python">
            <pre class="line-numbers"><code class="prism language-python" data-prism>os.environ['MY_VAR']</code></pre>
        </div>
        </div>
    </li>
    <li>
        <h3>Ruby</h3>
        <div>
        <div class="ide margin-top-small" data-lang="ruby" data-lang-label="Ruby">
            <pre class="line-numbers"><code class="prism language-ruby" data-prism>ENV['MY_VAR']</code></pre>
        </div>
        </div>
    </li>
    <li>
        <h3>Deno</h3>
        <div>
        <div class="ide margin-top-small" data-lang="typescript" data-lang-label="Deno">
            <pre class="line-numbers"><code class="prism language-typescript" data-prism>Deno.env.get('MY_VAR')</code></pre>
        </div>
        </div>
    </li>
    <li>
        <h3>Dart</h3>
        <div>
        <div class="ide margin-top-small" data-lang="dart" data-lang-label="Dart">
            <pre class="line-numbers"><code class="prism language-dart" data-prism>Platform.environment['MY_VAR']</code></pre>
        </div>
        </div>
    </li>
    <li>
        <h3>Swift</h3>
        <div>
        <div class="ide margin-top-small" data-lang="swift" data-lang-label="Swift">
            <pre class="line-numbers"><code class="prism language-swift" data-prism>ProcessInfo.processInfo.environment["MY_VAR"]</code></pre>
        </div>
        </div>
    </li>
    <li>
        <h3>.NET</h3>
        <div>
        <div class="ide margin-top-small" data-lang="csharp" data-lang-label="C#">
            <pre class="line-numbers"><code class="prism language-csharp" data-prism>Environment.GetEnvironmentVariable("MY_VAR")</code></pre>
        </div>
        </div>
    </li>
    <li>
        <h3>Kotlin</h3>
        <div>
        <div class="ide margin-top-small" data-lang="kotlin" data-lang-label="Kotlin">
            <pre class="line-numbers"><code class="prism language-kotlin" data-prism>System.getenv("MY_VAR")</code></pre>
        </div>
        </div>
    </li>
    <li>
        <h3>Java</h3>
        <div>
        <div class="ide margin-top-small" data-lang="java" data-lang-label="Java">
            <pre class="line-numbers"><code class="prism language-java" data-prism>System.getenv("MY_VAR")</code></pre>
        </div>
        </div>
    </li>
    <li>
        <h3>C++</h3>
        <div>
        <div class="ide margin-top-small" data-lang="cpp" data-lang-label="C++">
            <pre class="line-numbers"><code class="prism language-csharp" data-prism>std::getenv("MY_VAR")</code></pre>
        </div>
        </div>
    </li>
</ul>

<h2><a href="#dependencies" id="dependencies">Dependencies</a></h2>

<p> 
    Your function's dependencies should be managed by the package manager of each language. By default, we include the following package manages in each runtime:
</p>

<p>
    To install your dependencies before your function is built, you should add the relevant install command to the top your functions Build Commands script.
</p>

<table class="full text-size-small">
    <thead>
        <tr>
            <th>Language</th>
            <th>Package Manager</th>
            <th>Install Command</th>
        </tr>
    </thead>
    <tr>
        <td><b>Node.js</b></td>
        <td><a href="https://www.npmjs.com/" target="_blank">npm</a></td>
        <td><code>npm install</code></td>
    </tr>
    <tr>
        <td><b>PHP</b></td>
        <td><a href="https://getcomposer.org/" target="_blank">Composer</a></td>
        <td><code>composer install</code></td>
    </tr>
    <tr>
        <td><b>Python</b></td>
        <td><a href="https://pypi.org/project/pip/" target="_blank">pip</a></td>
        <td><code>pip install -r requirements.txt</code></td>
    </tr>
    <tr>
        <td><b>Ruby</b></td>
        <td><a href="https://bundler.io/" target="_blank">Bundler</a></td>
        <td><code>bundle install</code></td>
    </tr>
    <tr>
        <td><b>Deno</b></td>
        <td><a href="https://deno.land/" target="_blank">deno</a></td>
        <td><code>deno cache</code></td>
    </tr>
    <tr>
        <td><b>Dart</b></td>
        <td><a href="https://pub.dev/" target="_blank">pub</a></td>
        <td><code>pub get</code></td>
    </tr>
    <tr>
        <td><b>Swift</b></td>
        <td><a href="https://swift.org/package-manager/" target="_blank">Swift Package Manager</a></td>
        <td>N/A</td>
    </tr>
    <tr>
        <td><b>.NET</b></td>
        <td><a href="https://www.nuget.org/" target="_blank">NuGet</a></td>
        <td>N/A</td>
    </tr>
    <tr>
        <td><b>Kotlin</b></td>
        <td><a href="https://kotlinlang.org/docs/reference/using-gradle.html" target="_blank">Gradle</a></td>
        <td>N/A</td>
    </tr>
    <tr>
        <td><b>Java</b></td>
        <td><a href="https://gradle.org/" target="_blank">Gradle</a></td>
        <td>N/A</td>
    </tr>
    <tr>
        <td><b>C++</b></td>
        <td>None</td>
        <td>N/A</td>
    </tr>
</table>

<h2><a href="#appwrite" id="appwrite">Using Appwrite in a Function</a></h2>
[TODO: @luke @matej 2 examples -> JWT and API keys]

<h2><a href="#dependencies" id="dependencies">Quick Example</a></h2>
<ul class="phases clear" data-ui-phases>
    <li>
        <h3>Node.js</h3>
        <div>
        <div class="ide margin-top-small" data-lang="javascript" data-lang-label="JavaScript">
            <pre class="line-numbers"><code class="prism language-js" data-prism>

            </code></pre>
        </div>
        </div>
    </li>
    <li>
        <h3>PHP</h3>
        <div>
        <div class="ide margin-top-small" data-lang="php" data-lang-label="PHP">
            <pre class="line-numbers"><code class="prism language-php" data-prism>

            </code></pre>
        </div>
        </div>
    </li>
    <li>
        <h3>Python</h3>
        <div>
        <div class="ide margin-top-small" data-lang="python" data-lang-label="Python">
            <pre class="line-numbers"><code class="prism language-python" data-prism>

            </code></pre>
        </div>
        </div>
    </li>
    <li>
        <h3>Ruby</h3>
        <div>
        <div class="ide margin-top-small" data-lang="ruby" data-lang-label="Ruby">
            <pre class="line-numbers"><code class="prism language-ruby" data-prism>

            </code></pre>
        </div>
        </div>
    </li>
    <li>
        <h3>Deno</h3>
        <div>
        <div class="ide margin-top-small" data-lang="typescript" data-lang-label="Deno">
            <pre class="line-numbers"><code class="prism language-typescript" data-prism>

            </code></pre>
        </div>
        </div>
    </li>
    <li>
        <h3>Dart</h3>
        <div>
        <div class="ide margin-top-small" data-lang="dart" data-lang-label="Dart">
            <pre class="line-numbers"><code class="prism language-dart" data-prism>

            </code></pre>
        </div>
        </div>
    </li>
    <li>
        <h3>Swift</h3>
        <div>
        <div class="ide margin-top-small" data-lang="swift" data-lang-label="Swift">
            <pre class="line-numbers"><code class="prism language-swift" data-prism>

            </code></pre>
        </div>
        </div>
    </li>
    <li>
        <h3>.NET</h3>
        <div>
        <div class="ide margin-top-small" data-lang="csharp" data-lang-label="C#">
            <pre class="line-numbers"><code class="prism language-csharp" data-prism>

            </code></pre>
        </div>
        </div>
    </li>
    <li>
        <h3>Kotlin</h3>
        <div>
        <div class="ide margin-top-small" data-lang="kotlin" data-lang-label="Kotlin">
            <pre class="line-numbers"><code class="prism language-kotlin" data-prism>

            </code></pre>
        </div>

        </div>
    </li>
    <li>
        <h3>Java</h3>
        <div>
        <div class="ide margin-top-small" data-lang="java" data-lang-label="Java">
            <pre class="line-numbers"><code class="prism language-java" data-prism>

            </code></pre>
        </div>
        </div>
    </li>
    <li>
        <h3>C++</h3>
        <div>
        <div class="ide margin-top-small" data-lang="cpp" data-lang-label="C++">
            <pre class="line-numbers"><code class="prism language-csharp" data-prism>

            </code></pre>
        </div>
        </div>
    </li>
</ul>

<h2><a href="#multi-file" id="multi-file">Using Multiple Files</a></h2>
[TODO: @luke show how you can use multiple files in the same project]


<h2><a href="#recipes" id="recipes">Recipes</a></h2>
<p>
    We have a dedicated page of recipes to implement common functionalities in Appwrite Functions, like parsing request path and params, or making requests to third party APIs.
</p>

<p>
<a href="/docs/command-line-ci"><i class="icon-angle-circled-right"></i>Explore examples and recipes</a>
</p>