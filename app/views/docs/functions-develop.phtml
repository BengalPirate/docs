<p>
    Appwrite Functions offer a familiar interface if you've developed REST endpoints.
    Each function is handled following a request and response pattern.
    Here's what you need to know to start writing your first Appwrite Function.
</p>

<div class="notice">
  <h2>Just want the code? </h2>
  <p>If you prefer to learn through examples, explore the <a href="#recipes">recipes section</a>.</p>
</div>

<h2><a href="#context" id="context">The Context Object</a></h2>
<p>
    Context is an object passed into every function to handle communication to both the end users, and logging to the Appwrite console.
    All input, output, and logging **must be** handled through the context object passed in.
</p>

<p>You'll find these properties in the context object.</p>
<table class="full text-size-small">
    <thead>
    <tr>
        <td>Property</td>
        <td>Description</td>
    </tr>
    </thead>
    <tbody>
    <tr>
        <td>context.req</td>
        <td>Contains request information like method, body, and headers. See full examples <a href="#context-req">here</a>.</td>
    </tr>
    <tr>
        <td>context.res</td>
        <td>Contains methods to build a response and return information. See full examples <a href="#context-res">here</a>.</td>
    </tr>
    <tr>
        <td>context.log</td>
        <td>Logs information to the Appwrite Console, end users will not be able to see these logs. See full examples <a href="#context-log">here</a>.</td>
    </tr>
    <tr>
        <td>context.error</td>
        <td>Logs errors to the Appwrite Console, end users will not be able to see these errors. See full examples <a href="#context-error">here</a>.</td>
        <td></td>
    </tr>
    </tbody>
</table>

<p>Some lamguages support unpacking. You'll see us use unpacking in examples, which has the following syntax.</p>
[TODO: Example below for relevant languages.]
<ul class="phases clear" data-ui-phases>
    <li>
        <h3>Node.js</h3>
        <div>
        <div class="ide margin-top-small" data-lang="javascript" data-lang-label="JavaScript">
            <pre class="line-numbers"><code class="prism language-js" data-prism>

            </code></pre>
        </div>
        </div>
    </li>
    <li>
        <h3>PHP</h3>
        <div>
        <div class="ide margin-top-small" data-lang="php" data-lang-label="PHP">
            <pre class="line-numbers"><code class="prism language-php" data-prism>

            </code></pre>
        </div>
        </div>
    </li>
    <li>
        <h3>Python</h3>
        <div>
        <div class="ide margin-top-small" data-lang="python" data-lang-label="Python">
            <pre class="line-numbers"><code class="prism language-python" data-prism>

            </code></pre>
        </div>
        </div>
    </li>
    <li>
        <h3>Ruby</h3>
        <div>
        <div class="ide margin-top-small" data-lang="ruby" data-lang-label="Ruby">
            <pre class="line-numbers"><code class="prism language-ruby" data-prism>

            </code></pre>
        </div>
        </div>
    </li>
    <li>
        <h3>Deno</h3>
        <div>
        <div class="ide margin-top-small" data-lang="typescript" data-lang-label="Deno">
            <pre class="line-numbers"><code class="prism language-typescript" data-prism>

            </code></pre>
        </div>
        </div>
    </li>
    <li>
        <h3>Dart</h3>
        <div>
        <div class="ide margin-top-small" data-lang="dart" data-lang-label="Dart">
            <pre class="line-numbers"><code class="prism language-dart" data-prism>

            </code></pre>
        </div>
        </div>
    </li>
    <li>
        <h3>Swift</h3>
        <div>
        <div class="ide margin-top-small" data-lang="swift" data-lang-label="Swift">
            <pre class="line-numbers"><code class="prism language-swift" data-prism>

            </code></pre>
        </div>
        </div>
    </li>
    <li>
        <h3>.NET</h3>
        <div>
        <div class="ide margin-top-small" data-lang="csharp" data-lang-label="C#">
            <pre class="line-numbers"><code class="prism language-csharp" data-prism>

            </code></pre>
        </div>
        </div>
    </li>
    <li>
        <h3>Kotlin</h3>
        <div>
        <div class="ide margin-top-small" data-lang="kotlin" data-lang-label="Kotlin">
            <pre class="line-numbers"><code class="prism language-kotlin" data-prism>

            </code></pre>
        </div>

        </div>
    </li>
    <li>
        <h3>Java</h3>
        <div>
        <div class="ide margin-top-small" data-lang="java" data-lang-label="Java">
            <pre class="line-numbers"><code class="prism language-java" data-prism>

            </code></pre>
        </div>
        </div>
    </li>
    <li>
        <h3>C++</h3>
        <div>
        <div class="ide margin-top-small" data-lang="cpp" data-lang-label="C++">
            <pre class="line-numbers"><code class="prism language-csharp" data-prism>

            </code></pre>
        </div>
        </div>
    </li>
</ul>

<h3><a href="#request" id="request">Request</a></h3>
[TODO: full table of what's in a request]
[TODO: full examples of what's in a request]

<h3><a href="#response" id="response">Response</a></h3>
[TODO: Full table of what's in a res]
[TODO: full examples of what's in a res]


<h3><a href="#logging" id="logging">Logging</a></h3>
<p>
    To protect user privacy, the request and response objects are not logged to the Appwrite Console by default.
    This means, to see logs or debug function executions you need to use the <code>context.log()</code> and <code>context.error()</code> methods.
    These logs are only visible to developers with access to the Appwrite Console.
</p>
-> LIST WHAT WE SHOW AND WHAT WE DONT SHOW

<h2><a href="#environment-variables" id="environment-variables">Accessing Environment Variables</a></h2>
<p>
    If you need to pass constants or secrets to Appwrite Functions, you can use environment variables.
</p>

[TODO: ways to setup environment variables (link to deployment docs?)]

<p>
    You can access the environment variables through the systems library of each language.
</p>

<h2><a href="#dependencies" id="dependencies">Depencies</a></h2>

<h2><a href="#appwrite" id="appwrite">Using Appwrite in a Function</a></h2>
[TODO: 2 examples -> JWT and API keys]

<h2><a href="#recipes" id="recipes">Recipes</a></h2>
[TODO: Matej and Luke write examples]

<h2><a href="#limitations" id="limitations">Limitations</a></h2>
<!-- <p>Libraries dependent on</p> -->