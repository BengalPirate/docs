<p>
    Appwrite Functions are mini application in Appwrite with their own endpoint. 
    Each function can have many deployments, which can be thought of as versions of the mini-application.
</p>

<p>
    Functions can be deployed in different ways to meet your unique development habbits.
    You can automatically deploy Appwrite Functions from source control, build your own deployment pipelines using the Appwrite CLI, or upload code files manually.
    Here's everything you need to know to deploy your first Appwrite Function.
</p>

<h2><a href="#Git" id="Git">Git</a></h2>
<p>
    The recommended way to manage your Appwrite Function deployments is to use Git.
    This offers simple versioning and collaboration that will easily fit into the rest of your development workflow.
</p>

[TODO: Describe how to create a GitHub deployment]

<h3>Create</h3>
- Install Appwrite on your GitHub account/organization 
- Select a repository
- Select a production branch
- Define root directory
- Silent mode -> No comments on PRs
- Build commands 
<h3>Deploy</h3>
- Prod branch is automatically deployed on push and activated
    - Non prod branches are also built but not activated automatically
- Push to branch
<h3>Debugging Builds</h3>
- Check logs and errors
- Redeploy button for non-code issues [TODO: @matej write an example]

<h3><a href="#templates" id="templates">Templates</a></h3>
- Select repo -> Specify path
- Make repository

<h2><a href="#cli" id="cli">CLI</a></h2>
[TODO]

<h2><a href="#manual" id="manual">Manual</a></h2>
[TODO]

[tar --exclude code.tar.gz -czf code.tar.gz .]

<h2><a href="#life-cycle" id="life-cycle">Deployment Life Cycle</a></h2>
<p>Deployments will go through the following states throughout their life cycle.</p>
[TODO: @matej, describe the life cycle of a deployment (like being uploaded, built, build steps, etc.)]

[TODO: @matej What else?]