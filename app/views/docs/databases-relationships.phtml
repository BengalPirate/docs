<p>Entities in real-life often associate with each other in an organic and logical way, like a person and their dog, an album and its songs, or friends in a social network. These types of association between entities can be modeled in Appwrite using relationships. Relationships allow describe how collections are associated, so related documents can be read, updated, or deleted together.</p>

<h2><a href="/docs/databases-relations#when-to-use-relationships" id="when-to-use-relationships">When to Use a Relationship</a></h2>
[TODO: quickly describe how to tell if you need a relationship, trade offs, caveates, performance, etc.]

<h2><a href="/docs/databases-relations#types" id="types">Types of relationships</a></h2>
[TODO: Table of Types]
[TODO: Table of directionality]
[TODO: Describe Behavior on update, delete, etc]

<h2><a href="/docs/databases-relations#create-in-console" id="create-in-console">Creating Relationships in the Appwrite Console</a></h2>
[TODO: Steps to create relationships]

<h2><a href="/docs/databases-relations#create-in-console" id="create-in-console">Creating Relationships Programmatically</a></h2>
[TODO: Steps to create relationships in code]

<h2><a href="/docs/databases-relations#create-documents" id="create-documents">Creating Documents</a></h2>
[TODO: how to create documents in relationships, indexes, etc.]

<h2><a href="/docs/databases-relations#query" id="query">Queryings</a></h2>
[TODO: how to query relationships, indexes, etc.]

<h2><a href="/docs/databases-relations#permissions" id="permissions">Permissions</a></h2>
[TODO: describe permissions]

<h2><a href="/docs/databases-relations#limitations" id="limitations">Limitations</a></h2>
[TODO: describe limitations]