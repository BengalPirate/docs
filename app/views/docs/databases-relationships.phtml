<p>Relationships describe how documents in different collections are associated, so related documents can be read, updated, or deleted together. Entities in real-life often associate with each other in an organic and logical way, like a person and their dog, an album and its songs, or friends in a social network. These types of association between entities can be modeled in Appwrite using relationships.</p>

<h2><a href="/docs/databases-relations#when-to-use-relationships" id="when-to-use-relationships">When to Use a Relationship</a></h2>
<p>Relationships help reduce redundant information. For example, a user can create many posts in your app. You can model this without relationships by keeping a copy of the user's information in all the documents representing posts, but this creates a lot of duplicate information in your database about the user.</p>

<h3>Benefits of Relationships</h3>
<p>Duplicated records waste storage, but more importantly, makes the database much harder to maintain. If the user changes their user name, you will have to update dozens or hundreds of records. You can avoid duplicate information by storing users and posts in separate collections, and relating a user and their posts through a relationship.</p>

<h3>Tradeoff</h3>
<p>Consider using relationships when the same information is found in multiple places to avoid duplicates. However, relationships come with the tradeoff of slowing down queries. For applications where the best read and write performance is important, it may be acceptable to tolerate duplicate data.</p>

<h2><a href="/docs/databases-relations#configurable-options" id="configurable-options">Configurable Options</a></h2>

<h3><a href="/docs/databases-relations#directionality" id="directionality">Directionality</a></h3>
<p>Appwrite relationships can be one-way or two-way.</p>
<table cellspacing="0" cellpadding="0" border="0" class="full margin-bottom-large">
    <thead>
        <tr>
            <th style="width: 250px">Type</th>
            <th>Description</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td><code>One-way</code></td>
            <td>The relationship is only visible to one side of the relation. For example, subscribers on YouTube is one-way. If you subscribe to a channel, they don't automatically subscribe back.</td>
        </tr>
        <tr>
            <td><code>Two-way</code></td>
            <td>The relationship is visible to both sides of the realtion. For example, friends on social media is two-way. If you're someone's friend, they're automatically your friend as well.</td>
        </tr>
    </tbody>
</table>

<h3><a href="/docs/databases-relations#cardinality" id="cardinality">Cardinality</a></h3>
<p>Appwrite provides four different relationship types to enforce different associative rules between documents.</p>
<table cellspacing="0" cellpadding="0" border="0" class="full margin-bottom-large">
    <thead>
        <tr>
            <th style="width: 250px">Type</th>
            <th>Description</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td><code>One-to-one</code></td>
            <td>A document can only be related with one and <b>only</b> one document. If you try to relate multiple documents in a one-to-one relationship, Appwrite throws an error. For example, each user has only one profile.</td>
        </tr>
        <tr>
            <td><code>One-to-many</code></td>
            <td>A document can be related to many other documents. For example, a user can create many posts.</td>
        </tr>
        <tr>
            <td><code>Many-to-one</code></td>
            <td>Many documents can be related to a single document. For example, many posts can share the same author.</td>
        </tr>
        <tr>
            <td><code>Many-to-many</code></td>
            <td>A document can be related to many other documents. For example, a user can have many friends and many users can share the same friend.</td>
        </tr>
    </tbody>
</table>

<h3><a href="/docs/databases-relations#on-delete" id="on-delete">On Delete Behavior</a></h3>
<p>
    Appwrite also allows you to define the behavior of a relationship when a document is deleted.
</p>
<table cellspacing="0" cellpadding="0" border="0" class="full margin-bottom-large">
    <thead>
        <tr>
            <th style="width: 250px">Type</th>
            <th>Description</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td><code>Restrict</code></td>
            <td>If a document has at least one related document, it cannot be deleted.</td>
        </tr>
        <tr>
            <td><code>Cascade</code></td>
            <td>If a document has related documents, when it is deleted, the related documents are <b>also</b> deleted.</td>
        </tr>
        <tr>
            <td><code>Set null</code></td>
            <td>If a document has related documents, when it is deleted, the related documents are kept with their relationship attribute set to <b>null</b>.</td>
        </tr>
    </tbody>
</table>

<h2><a href="/docs/databases-relations#create-in-console" id="create-in-console">Creating Relationships in the Appwrite Console</a></h2>
<p>You can create relationships in the Appwrite Console by adding a relationship attribute.</p>
<ol class="margin-top margin-bottom-large text-size-normal">
    <li>In your project, navigate to <b>Databases</b> > <b>Select your database</b> > <b>Select your collection</b> > <b>Attributes</b> > <b>Create attribute</b>.</li>
    <li>Select <b>Relationship</b> as the attribute type.</li>
    <li>In the <b>Relationship</b> modal, select the <a href="/docs/databases-relations#types">relationship type</a> and pick the related collection and attributes.</li>
    <li>Pick attribute key(s) to represent the relationship. Attribute keys are used to reference a relationship in queries, so pick something that's intuitive and easy to remember.</li>
    <li>Select desired behavior <a href="/docs/databases-relations#on-delete">on delete</a>.</li>
    <li>Click the <b>Create</b> button to create the relationship.</li>
</ol>

<h2><a href="/docs/databases-relations#create-in-code" id="create-in-code">Creating Relationships Programmatically</a></h2>
[TODO: Steps to create relationships in code]

<h2><a href="/docs/databases-relations#create-documents" id="create-documents">Creating Documents</a></h2>
<p>If a collection has relationship attributes, you can create documents in two ways.</p>

<h3>Created Child Documents</h3>
<p>You can create both the <b>parent</b> and <b>child</b> at once in a relationship by nesting data.</p>
[CODE EXAMPLES]

<p>If a nested document is included and <b>no conflicting document ID</b> exists, the child document will be <b>created</b>.</p>
<p>If a nested document is included and the <b>document ID already exists</b>, the child document will be <b>updated</b>.</p>

<h3>Reference Child Documents</h3>
<p>You can create the parent and <b>reference the child documents</b> using their IDs.</p>
[CODE EXAMPLES]

<h2><a href="/docs/databases-relations#query" id="query">Querying</a></h2>
[TODO: how to query relationships, indexes, etc.]
<p>You can query documents in a relation by referencing the relationship attribute key using dot-notation. For example, querying for the <code>name</code> <code>customer</code> relationship would look like <code>Query.equal('customer.name', ['John'])</code>.</p>

[CODE EXAMPLES]
<h2><a href="/docs/databases-relations#update-and-delete" id="update-and-delete">Updaing and Deleting Documents</a></h2>
[TODO: how to query relationships, indexes, etc.]

<h2><a href="/docs/databases-relations#permissions" id="permissions">Permissions</a></h2>
<p>To access documents in a relationship, you must have permission to acecss both the parent and child document.</p>

<p>When creating both the parent and child documents, the child document will inheret permissions from its parent. You can also provide explicit permissions to the child document if you need them to be different from the parent.</p>
[Code example]

<p>When creating the parent document and linking to a child document, or updating a relationship you must have permission to access both documents. If the user does not have read permission, an exception will be thrown.</p>
[Code example]

<h2><a href="/docs/databases-relations#limitations" id="limitations">Limitations</a></h2>
[TODO: describe limitations]